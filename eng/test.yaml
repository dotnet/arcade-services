steps: 

- task: DotNetCoreCLI@2
  displayName: Test C# (dotnet test)
  inputs:
    command: custom
    projects: |
      src/**/*.Tests.csproj
    custom: test
    arguments: > 
      --configuration $(_BuildConfig)
      --collect:"Code Coverage"
      --settings:CodeCoverage.runsettings
      --filter "TestCategory!=PostDeployment&TestCategory!=Nightly&TestCategory!=PreDeployment"
      --no-build
      --logger "trx;LogFilePrefix=TestResults-"
      -v normal
      --
      "RunConfiguration.ResultsDirectory=$(Build.ArtifactStagingDirectory)\TestResults"
      RunConfiguration.MapCpuCount=4
  env:
    NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
  condition: succeededOrFailed()

- task: Powershell@2
  inputs: 
    targetType: filePath
    filePath: eng\convert-codecoveragetoxml.ps1
    arguments: -Path "$(Build.ArtifactStagingDirectory)\TestResults" -NugetPackagesPath "$(Build.SourcesDirectory)\.packages"
  displayName: Convert Code Coverage to XML (powershell)

- task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
  displayName: ReportGenerator
  inputs:
    reports: $(Build.ArtifactStagingDirectory)\TestResults\codecoverage.coveragexml
    targetdir: $(Build.ArtifactStagingDirectory)\CodeCoverage
    reporttypes: HtmlInline_AzurePipelines;Cobertura
    sourcedirs: $(Build.SourcesDirectory)

- task: PublishTestResults@2
  displayName: Publish Core Test Results
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/TestResults-*' 
    searchFolder: $(Build.ArtifactStagingDirectory)\TestResults
    testRunTitle: Basic Tests
    mergeTestResults: true
    configuration: $(_BuildConfig)

- task: PublishCodeCoverageResults@1
  displayName: Publish Code Coverage
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(Build.ArtifactStagingDirectory)\CodeCoverage\Cobertura.xml
    pathToSources: $(Build.SourcesDirectory)
    publishRunAttachments: true

- script: echo export const token = ''; > src/environments/token.ts
  workingDirectory: $(Build.SourcesDirectory)/src/Maestro/maestro-angular
  displayName: Prepare For UI Tests

- script: npm run-script test -- --watch=false --reporters progress,junit --browsers ChromeHeadless
  workingDirectory: $(Build.SourcesDirectory)/src/Maestro/maestro-angular
  displayName: Run UI Tests

- task: PublishTestResults@2
  displayName: Publish UI Test Results
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/TESTS-*.xml' 
    searchFolder: $(Build.SourcesDirectory)/src/Maestro/maestro-angular
    testRunTitle: UI Tests ($(Agent.JobName))
