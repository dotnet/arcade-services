steps: 

- task: Powershell@2
  displayName: Install SQL Express
  inputs: 
    targetType: filePath
    filePath: eng\Install-SqlExpress.ps1

- task: DotNetCoreCLI@2
  displayName: Test C# (dotnet test)
  inputs:
    command: custom
    projects: |
      $(Build.SourcesDirectory)\arcade-services.sln
    custom: test
    arguments: > 
      --configuration $(_BuildConfig)
      --collect:"Code Coverage"
      --settings:CodeCoverage.runsettings
      --filter "TestCategory!=PostDeployment&TestCategory!=Nightly&TestCategory!=PreDeployment"
      --no-build
      --logger "trx;LogFilePrefix=TestResults-"
      -v normal
      --
      "RunConfiguration.ResultsDirectory=$(Build.ArtifactStagingDirectory)\TestResults"
      RunConfiguration.MapCpuCount=4
  env:
    NUGET_PACKAGES: $(Build.SourcesDirectory)/.packages
  condition: succeededOrFailed()

- powershell: |
    # Prepare an empty VMR
    $vmrDir = "$(Agent.TempDirectory)\vmr"
    New-Item -Path "$vmrDir\src" -ItemType directory
    Copy-Item -Path "$(Build.SourcesDirectory)\src\Microsoft.DotNet.Darc\tests\Microsoft.DotNet.Darc.Tests\inputs\source-mappings.json" -Destination "$vmrDir\src"
    git config --global user.email "dotnet-maestro[bot]@users.noreply.github.com"
    git config --global user.name "dotnet-maestro[bot]"
    git -C "$vmrDir" init --initial-branch main
    git -C "$vmrDir" add -A
    git -C "$vmrDir" commit -m "Initial commit"

    # Get SHAs of last few commits to sync between them
    $response = Invoke-RestMethod -Uri "https://api.github.com/repos/dotnet/command-line-api/commits?per_page=5"
    $firstSha = $response[0].sha
    $secondSha = $response[-1].sha

    # Prepare darc settings
    $(Build.SourcesDirectory)\artifacts\bin\Microsoft.DotNet.Darc\Debug\net6.0\publish\Microsoft.DotNet.Darc.exe authenticate --clear

    # Initialize a couple of repos in the VMR
    $(Build.SourcesDirectory)\artifacts\bin\Microsoft.DotNet.Darc\Debug\net6.0\publish\Microsoft.DotNet.Darc.exe vmr initialize `
    --vmr "$vmrDir"                `
    --tmp "$(Agent.TempDirectory)" `
    --azdev-pat "N/A"              `
    --github-pat "N/A"             `
    --recursive                    `
    --verbose                      `
    command-line-api:$firstSha

    # Update the repos in the VMR with some new commits
    $(Build.SourcesDirectory)\artifacts\bin\Microsoft.DotNet.Darc\Debug\net6.0\publish\Microsoft.DotNet.Darc.exe vmr update `
    --vmr "$vmrDir"                `
    --tmp "$(Agent.TempDirectory)" `
    --azdev-pat "N/A"              `
    --github-pat "N/A"             `
    --recursive                    `
    --verbose                      `
    command-line-api:$secondSha
  displayName: Test VMR tooling
  condition: and(succeeded(), in(variables['Build.Reason'], 'PullRequest'), eq(variables['_BuildConfig'], 'Debug'))

- task: Powershell@2
  inputs: 
    targetType: filePath
    filePath: eng\convert-codecoveragetoxml.ps1
    arguments: -Path "$(Build.ArtifactStagingDirectory)\TestResults" -NugetPackagesPath "$(Build.SourcesDirectory)\.packages"
  displayName: Convert Code Coverage to XML (powershell)

- task: reportgenerator@5
  displayName: ReportGenerator
  inputs:
    reports: $(Build.ArtifactStagingDirectory)\TestResults\codecoverage.coveragexml
    targetdir: $(Build.ArtifactStagingDirectory)\CodeCoverage
    reporttypes: HtmlInline_AzurePipelines;Cobertura
    sourcedirs: $(Build.SourcesDirectory)

- task: PublishTestResults@2
  displayName: Publish Core Test Results
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/TestResults-*' 
    searchFolder: $(Build.ArtifactStagingDirectory)\TestResults
    testRunTitle: Basic Tests
    mergeTestResults: true
    configuration: $(_BuildConfig)

- task: PublishCodeCoverageResults@1
  displayName: Publish Code Coverage
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(Build.ArtifactStagingDirectory)\CodeCoverage\Cobertura.xml
    pathToSources: $(Build.SourcesDirectory)
    publishRunAttachments: true

- script: echo export const token = ''; > src/environments/token.ts
  workingDirectory: $(Build.SourcesDirectory)/src/Maestro/maestro-angular
  displayName: Prepare For UI Tests

- script: npm run-script test -- --watch=false --reporters progress,junit --browsers ChromeHeadless
  workingDirectory: $(Build.SourcesDirectory)/src/Maestro/maestro-angular
  displayName: Run UI Tests

- task: PublishTestResults@2
  displayName: Publish UI Test Results
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/TESTS-*.xml' 
    searchFolder: $(Build.SourcesDirectory)/src/Maestro/maestro-angular
    testRunTitle: UI Tests ($(Agent.JobName))
