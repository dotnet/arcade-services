trigger: none
pr: none

resources:
  pipelines:
  - pipeline: Build
    source: arcade-services-internal-ci
    trigger:
      branches:
        include:
        - master
        - production

variables:
- ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/production') }}:
  - name: DeploymentEnvironment
    value: Staging
  - name: DotNetStatusAppName
    value: dotneteng-status-staging
  - name: DotNetStatusEndpoint
    value: .NET Engineering Deployment Notification - Staging
  - name: MaestroPublishEndpoint
    value: https://maestro-prod.westus2.cloudapp.azure.com
  - name: MaestroTestEndpoint
    value: https://maestro-int.westus2.cloudapp.azure.com
  - name: PublishProfile
    value: Int
  - name: ServiceFabricConnection
    value: Maestro-Int
  - name: Subscription
    value: NetHelixStaging
  - group: MaestroInt KeyVault
  - group: DotNetStatus Staging
- ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/production') }}:
  - name: DeploymentEnvironment
    value: Production
  - name: DotNetStatusAppName
    value: dotneteng-status
  - name: DotNetStatusEndpoint
    value: .NET Engineering Deployment Notification - Production
  - name: MaestroPublishEndpoint
    value: https://maestro-prod.westus2.cloudapp.azure.com
  - name: MaestroTestEndpoint
    value: https://maestro-prod.westus2.cloudapp.azure.com
  - name: PublishProfile
    value: Prod
  - name: ServiceFabricConnection
    value: Maestro-Prod
  - name: Subscription
    value: NetHelix
  - group: MaestroProd KeyVault
  - group: DotNetStatus Production


  # --- Secret Variable group requirements ---
  # maestro-admin-sql-connection-string
  # scenario-test-maestro-token
  # dn-bot-dnceng-build-rw-code-rw-release-rw
  # maestro-scenario-test-github-token
  # dotnet-build-bot-dotnet-eng-status-token

stages:
- stage: predeploy
  displayName: Pre-Deployment
  jobs:
  - job: notifyStartDeployment
    displayName: Notify deployment start
    pool: server
    steps:
    - task: InvokeRESTAPI@1
      displayName: Notify dotnet-eng-staus/start
      continueOnError: true
      inputs:
        serviceConnection: $(DotNetStatusEndpoint)
        method: POST
        headers: |
          {
            "Authorization": "Bearer $(dotnet-build-bot-dotnet-eng-status-token)",
          }
        urlSuffix: /arcade-services/$(Build.BuildNumber)/start

- stage: deploy
  displayName: Deploy
  dependsOn:
  - predeploy
  variables:
  - name: PublishProfile
    value: $(PublishProfile)
  jobs:
  - deployment: approval
    displayName: deployment approval (conditional)
    environment: $(DeploymentEnvironment)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: none
  - job: updateDatabase
    dependsOn: 
    - approval
    displayName: Update BuildAssetRegistry database
    steps:
    - download: Build
      artifact: ReleaseUtilities
    - download: Build
      artifact: Maestro.Data
    - task: UseDotNet@2
      displayName: Use .NET 3.0.x SDK
      inputs:
        packageType: sdk
        version: 3.0.x
    - task: UseDotNet@2
      displayName: Use .NET 2.1.x runtime
      inputs:
        packageType: runtime
        version: 2.1.x
    - task: AzurePowerShell@3
      displayName: eng\firewall.ps1 -Add
      inputs:
        azureSubscription: $(Subscription)
        ScriptPath: $(Pipeline.Workspace)/Build/ReleaseUtilities/firewall.ps1
        ScriptArguments: -RuleName UnblockSQLForUpgrade -Add -ConnectionString "$(maestro-admin-sql-connection-string)"
        azurePowerShellVersion: LatestVersion
    - task: PowerShell@2
      displayName: update-database.ps1
      inputs:
        targetType: filePath
        filePath: $(Pipeline.Workspace)/Build/Maestro.Data/update-database.ps1
        arguments: Maestro.Data.dll
        workingDirectory: $(Pipeline.Workspace)/Build/Maestro.Data
      env:
        BUILD_ASSET_REGISTRY_DB_CONNECTION_STRING: $(maestro-admin-sql-connection-string)
    - task: AzurePowerShell@3
      displayName: eng\firewall.ps1 -Remove
      inputs:
        azureSubscription: $(Subscription)
        ScriptPath: $(Pipeline.Workspace)/Build/ReleaseUtilities/firewall.ps1
        ScriptArguments: -RuleName UnblockSQLForUpgrade -Remove -ConnectionString "$(maestro-admin-sql-connection-string)"
        azurePowerShellVersion: LatestVersion
      condition: always()

  - job: deployMaestro
    displayName: Deploy maestro service fabric application
    dependsOn: 
    - updateDatabase
    - approval
    steps:
    - download: Build
      artifact: MaestroApplication
    - task: ServiceFabricDeploy@1
      displayName: Deploy Service Fabric Application (Maestro)
      inputs:
        applicationPackagePath: $(Pipeline.Workspace)/Build/MaestroApplication/applicationpackage
        serviceConnectionName: $(ServiceFabricConnection)
        publishProfilePath: $(Pipeline.Workspace)/Build/MaestroApplication/projectartifacts/PublishProfiles/$(PublishProfile).xml
        applicationParameterPath: $(Pipeline.Workspace)/Build/MaestroApplication/projectartifacts/ApplicationParameters/$(PublishProfile).xml

  - job: deployTelemetry
    displayName: Deploy telemetry service fabric application
    dependsOn: 
    - approval
    steps:
    - download: Build
      artifact: TelemetryApplication
    - task: ServiceFabricDeploy@1
      displayName: Deploy Service Fabric Application (Telemetry)
      inputs:
        applicationPackagePath: $(Pipeline.Workspace)/Build/TelemetryApplication/applicationpackage
        serviceConnectionName: $(ServiceFabricConnection)
        publishProfilePath: $(Pipeline.Workspace)/Build/TelemetryApplication/projectartifacts/PublishProfiles/$(PublishProfile).xml
        applicationParameterPath: $(Pipeline.Workspace)/Build/TelemetryApplication/projectartifacts/ApplicationParameters/$(PublishProfile).xml

  - job: deployStatus
    displayName: Deploy dotnet-status web app
    dependsOn: 
    - approval
    steps:
    - download: Build
      artifact: DotNetStatus
    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: AzureRM
        azureSubscription: $(Subscription)
        appType: webApp
        WebAppName: $(DotNetStatusAppName)
        deployToSlotOrASE: true
        ResourceGroupName: monitoring
        SlotName: staging
        Package: $(Pipeline.Workspace)/Build/DotNetStatus/DotNetStatus.zip
        enableCustomDeployment: true
        DeploymentType: webDeploy
        RemoveAdditionalFilesFlag: true

- stage: postdeploy
  displayName: Post-Deployment
  dependsOn:
  - deploy
  condition: always()
  jobs:
  - job: notifyEndDeployment
    displayName: Notify deployment end
    pool: server
    steps:
    - task: InvokeRESTAPI@1
      displayName: Notify dotnet-eng-staus/end
      continueOnError: true
      inputs:
        serviceConnection: .NET Engineering Deployment Notification - Staging
        method: POST
        headers: |
          {
            "Authorization": "Bearer $(dotnet-build-bot-dotnet-eng-status-token)",
          }
        urlSuffix: /arcade-services/$(Build.BuildNumber)/end
- stage: validateDeployment
  displayName: Validate deployment
  dependsOn: 
  - deploy
  variables:
  - name: MaestroTestEndpoint
    value: $(MaestroTestEndpoint)
  jobs:
  - job: scenario
    displayName: Scenario tests
    steps:
    - download: Build
      artifact: ScenarioTests
    - download: Build
      artifact: PackageArtifacts
    - task: NuGetToolInstaller@1
      displayName: Use NuGet
      inputs:
        versionSpec: 5.3.x
    - powershell: |
        nuget sources add -Name "arcade" -Source "https://dotnetfeed.blob.core.windows.net/dotnet-tools-internal/index.json"
        nuget sources add -Name "dotnet-core" -Source "https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json"
      displayName: Add nuget Sources
    - powershell: |
        $versionEndpoint = "$(MaestroTestEndpoint)/api/assets/darc-version?api-version=2019-01-16"
        $latestDarcVersion = $darcVersion = $(Invoke-WebRequest -Uri $versionEndpoint -UseBasicParsing).Content
        Write-Host "##vso[task.setvariable variable=darcVersion]$latestDarcVersion"
        Write-Host "Using Darc version $latestDarcVersion to run the tests"
      displayName: Get DARC version
    - task: PowerShell@2
      displayName: Run Scenario Tests
      inputs:
        targetType: filePath
        filePath: $(Pipeline.Workspace)/Build/ScenarioTests/all.ps1
        arguments: -maestroInstallation "$(MaestroTestEndpoint)" -darcVersion "$(darcVersion)" -maestroBearerToken "$(scenario-test-maestro-token)" -githubPAT "$(maestro-scenario-test-github-token)" -azdoPAT "$(dn-bot-dnceng-build-rw-code-rw-release-rw)" -darcPackageSource "$(Pipeline.Workspace)\Build\PackageArtifacts"
        workingDirectory: $(Pipeline.Workspace)/Build/ScenarioTests
      timeoutInMinutes: 90
