parameters:
- name: isProd
  type: boolean

# --- Secret Variable group requirements ---
# dn-bot-dnceng-build-rw-code-rw-release-rw
# maestro-scenario-test-github-token

stages:
- template: /eng/templates/stages/secret-validation.yml@self
  parameters:
    verifyOnly: true

- stage: approval
  dependsOn:
  - build
  - ${{ if parameters.isProd }}:
    - publish_using_darc
  jobs:
  - deployment: approval
    displayName: deployment approval (conditional)
    ${{ if parameters.isProd }}:
      environment: Production
    ${{ else }}:
      environment: Staging
    pool: server
    strategy:
      runOnce:
        deploy: {}

- stage: deploy
  displayName: Deploy
  dependsOn:
  - build
  - approval
  
  variables:
  - ${{ if parameters.isProd }}:
    - group: MaestroProd KeyVault
    - name: PublishProfile
      value: Prod
    - name: Subscription
      value: NetHelix
    - name: BarConnectionString
      value: "Data Source=tcp:maestro-prod.database.windows.net,1433; Initial Catalog=BuildAssetRegistry; Authentication=Active Directory Default; Persist Security Info=False; MultipleActiveResultSets=True; Connect Timeout=120; Encrypt=True; TrustServerCertificate=False; User Id=1093df3b-c754-4788-a4ae-ea33b86b82aa"
    - name: BarMigrationSubscription
      value: BarMigrationProd
  - ${{ else }}:
    - group: MaestroInt KeyVault
    - name: PublishProfile
      value: Int
    - name: Subscription
      value: NetHelixStaging
    - name: BarConnectionString
      value: "Data Source=tcp:maestro-int-server.database.windows.net,1433; Initial Catalog=BuildAssetRegistry; Authentication=Active Directory Default; Persist Security Info=False; MultipleActiveResultSets=True; Connect Timeout=120; Encrypt=True; TrustServerCertificate=False; User Id=736067df-a2c8-4c63-ad30-12db55c186cc"
    - name: BarMigrationSubscription
      value: BarMigrationInt
  
  - name: currentDate
    value: $[format('{0:yyyy}-{0:MM}-{0:dd}', pipeline.startTime)]
  
  jobs:
  - job: updateDatabase
    displayName: Update BuildAssetRegistry database
    steps:
    - download: current
      artifact: ReleaseUtilities

    - task: AzureCLI@2
      displayName: Entity Framework update
      inputs:
        azureSubscription: ${{ variables.BarMigrationSubscription }}
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          .\eng\common\build.ps1 -restore -build -projects src\Maestro\Maestro.Data\Maestro.Data.csproj
          .\.dotnet\dotnet tool restore
          .\.dotnet\dotnet ef database update                           `
            --project .\src\Maestro\Maestro.Data\Maestro.Data.csproj    `
            --msbuildprojectextensionspath .\artifacts\obj\Maestro.Data `
            --no-build                                                  `
            --verbose
      env:
        BUILD_ASSET_REGISTRY_DB_CONNECTION_STRING: ${{ variables.BarConnectionString }}

  - job: deployMaestro
    displayName: Deploy Maestro
    timeoutInMinutes: 85
    dependsOn:
    - updateDatabase
    
    steps:
    - download: current
      artifact: MaestroApplication

    - download: current
      artifact: ReleaseUtilities

    - task: AzurePowerShell@5
      displayName: Deploy Service Fabric Application (Maestro)
      inputs:
        azureSubscription: ${{ variables.Subscription }}
        scriptType: inlineScript
        azurePowerShellVersion: LatestVersion
        inline: |
          $autoRollBack = $true
          if ($env:DisableAutoRollBack -eq 'true') {
            $autoRollBack = $false
          }
          if ($env:BUILD_SOURCEBRANCH -eq 'refs/heads/main') {
            $autoRollBack = $false
          }
          eng/deployment/deploy.ps1 -obj $env:BUILD_ARTIFACTSTAGINGDIRECTORY -appPackagePath $env:ApplicationPackage -publishProfile $env:PublishProfilePath -autoRollBack $autoRollBack -location westus2
      env:
        PublishProfilePath: $(Pipeline.Workspace)/MaestroApplication/projectartifacts/PublishProfiles/${{ variables.PublishProfile }}.xml
        ApplicationPackage: $(Pipeline.Workspace)/MaestroApplication/applicationpackage

    - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/production')}}:
      - download: current
        artifact: AssetManifests

      - powershell: |
          $xmlPaths = Get-ChildItem $(Pipeline.Workspace)/AssetManifests/ -Filter *.xml
          $xml = [xml](Get-Content $xmlPaths[0].FullName)
          $releaseVersion = $xml.Build.Package[0].Version
          gh release create "v$(Build.BuildNumber)-$releaseVersion" `
            --generate-notes `
            --latest `
            --title "Rollout $(currentDate) / $(Build.BuildNumber)" `
            --target $(Build.SourceVersion) `
            --notes "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)" `
            --repo dotnet/arcade-services
        displayName: Create GitHub release
        env:
          GH_TOKEN: $(BotAccount-dotnet-bot-repo-PAT)
        continueOnError: true

- stage: validateDeployment
  displayName: Validate deployment
  dependsOn:
  - deploy
  
  variables:
  - group: Publish-Build-Assets
  - ${{ if parameters.isProd }}:
    - group: MaestroProd KeyVault
    - name: MaestroTestEndpoints
      value: https://maestro-prod.westus2.cloudapp.azure.com,https://maestro.dot.net
    - name: ScenarioTestSubscription
      value: "Darc: Maestro Production"
    - name: MaestroAppId
      value: $(MaestroAppClientId)
  - ${{ else }}:
    - group: MaestroInt KeyVault
    - name: MaestroTestEndpoints
      value: https://maestro-int.westus2.cloudapp.azure.com,https://maestro.int-dot.net
    - name: ScenarioTestSubscription
      value: "Darc: Maestro Staging"
    - name: MaestroAppId
      value: $(MaestroStagingAppClientId)

  jobs:
  - job: scenario
    displayName: Scenario tests
    timeoutInMinutes: 120
    steps:
    - download: current
      displayName: Download Darc
      artifact: PackageArtifacts

    - download: current
      displayName: Download ScenarioTets
      artifact: Maestro.ScenarioTests

    - task: NuGetToolInstaller@1
      displayName: Use NuGet
      inputs:
        versionSpec: 5.3.x

    - powershell: |
        . .\eng\common\tools.ps1
        InitializeDotNetCli -install:$true
        .\.dotnet\dotnet workload install aspire
      displayName: Install .NET and Aspire Workload

    - powershell: .\eng\common\build.ps1 -restore
      displayName: Install .NET

    - powershell: |
        mkdir darc
        .\.dotnet\dotnet tool install Microsoft.DotNet.Darc --prerelease --tool-path .\darc --add-source $(Pipeline.Workspace)\PackageArtifacts
      displayName: Install Darc

    - task: AzureCLI@2
      name: GetAuthInfo
      displayName: Get auth information
      inputs:
        azureSubscription: ${{ variables.ScenarioTestSubscription }}
        addSpnToEnvironment: true
        scriptType: ps
        scriptLocation: inlineScript
        inlineScript: |
          # Fetch token used for scenario tests
          $token = (az account get-access-token --resource "${{ variables.MaestroAppId }}" | ConvertFrom-Json).accessToken
          echo "##vso[task.setvariable variable=Token;isOutput=true;isSecret=true]$token"

          # Set variables with auth info for tests below
          echo "##vso[task.setvariable variable=ServicePrincipalId;isOutput=true]$env:servicePrincipalId"
          echo "##vso[task.setvariable variable=FederatedToken;isOutput=true;isSecret=true]$env:idToken"
          echo "##vso[task.setvariable variable=TenantId;isOutput=true]$env:tenantId"

          # Either of the URIs will do
          $barUri = "${{ split(variables.MaestroTestEndpoints, ',')[0] }}"
          echo "##vso[task.setvariable variable=BarUri;isOutput=true]$barUri"

    - powershell:
        az login --service-principal -u "$(GetAuthInfo.ServicePrincipalId)" --federated-token "$(GetAuthInfo.FederatedToken)" --tenant "$(GetAuthInfo.TenantId)" --allow-no-subscriptions 
        
        .\darc\darc.exe get-default-channels --source-repo arcade-services --ci --bar-uri "$(GetAuthInfo.BarUri)" --debug
      displayName: Test Azure CLI auth

    - powershell:
        .\darc\darc.exe get-default-channels --source-repo arcade-services --ci --password "$(GetAuthInfo.Token)" --bar-uri "$(GetAuthInfo.BarUri)" --debug
      displayName: Test BAR token auth

    - task: VSTest@2
      displayName: Maestro Scenario Tests
      inputs:
        testSelector: testAssemblies
        testAssemblyVer2: |
          Maestro.ScenarioTests.dll
        searchFolder: $(Pipeline.Workspace)/Maestro.ScenarioTests
        runInParallel: true
      env:
        MAESTRO_BASEURIS: ${{ variables.MaestroTestEndpoints }}
        MAESTRO_TOKEN: $(GetAuthInfo.Token)
        GITHUB_TOKEN: $(maestro-scenario-test-github-token)
        AZDO_TOKEN: $(dn-bot-dnceng-build-rw-code-rw-release-rw)
        DARC_PACKAGE_SOURCE: $(Pipeline.Workspace)\PackageArtifacts
        DARC_DIR: $(Build.SourcesDirectory)\darc
        DARC_IS_CI: true
