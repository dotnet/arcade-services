parameters:
- name: Subscription
  type: string
- name: PublishProfile
  type: string
  values: [ 'Int', 'Prod' ]
- name: DeploymentEnvironment
  type: string
- name: VariableGroup
  type: string
- name: MaestroTestEndpoint
  type: string

  # --- Secret Variable group requirements ---
  # build-asset-registry-admin-connection-string
  # scenario-test-maestro-token
  # dn-bot-dnceng-build-rw-code-rw-release-rw
  # maestro-scenario-test-github-token
  # dotnet-build-bot-dotnet-eng-status-token

stages:
- template: ./secret-validation.yml
  parameters:
    verifyOnly: true

- stage: approval
  pool: server
  dependsOn:
  - build
  jobs:
  - deployment: approval
    displayName: deployment approval (conditional)
    environment: ${{ parameters.DeploymentEnvironment }}

- stage: deploy
  displayName: Deploy
  dependsOn:
  - build
  - approval
  variables:
  - group: ${{ parameters.VariableGroup }}
  jobs:
  - job: updateDatabase
    displayName: Update BuildAssetRegistry database
    steps:
    - download: current
      artifact: ReleaseUtilities
    - download: current
      artifact: Maestro.Data

    - task: UseDotNet@2
      displayName: Install .NET
      inputs:
        useGlobalJson: true

    - task: AzurePowerShell@3
      displayName: Add firewall rule
      inputs:
        azureSubscription: ${{ parameters.Subscription }}
        ScriptPath: $(Pipeline.Workspace)/ReleaseUtilities/firewall.ps1
        ScriptArguments: -RuleName UnblockSQLForUpgrade -Add -ConnectionString "$(build-asset-registry-admin-connection-string)"
        azurePowerShellVersion: LatestVersion
    - task: PowerShell@2
      displayName: update-database.ps1
      inputs:
        targetType: filePath
        filePath: $(Pipeline.Workspace)/Maestro.Data/update-database.ps1
        arguments: Maestro.Data.dll
        workingDirectory: $(Pipeline.Workspace)/Maestro.Data
      env:
        BUILD_ASSET_REGISTRY_DB_CONNECTION_STRING: $(build-asset-registry-admin-connection-string)
    - task: AzurePowerShell@3
      displayName: Remove firewall rule
      inputs:
        azureSubscription: ${{ parameters.Subscription }}
        ScriptPath: $(Pipeline.Workspace)/ReleaseUtilities/firewall.ps1
        ScriptArguments: -RuleName UnblockSQLForUpgrade -Remove -ConnectionString "$(build-asset-registry-admin-connection-string)"
        azurePowerShellVersion: LatestVersion
      condition: always()

  - job: deployMaestro
    displayName: Deploy Maestro
    dependsOn:
    - updateDatabase
    steps:
    - download: current
      artifact: MaestroApplication
    - download: current
      artifact: ReleaseUtilities
    - task: AzurePowerShell@5
      displayName: Deploy Service Fabric Application (Maestro)
      inputs:
        azureSubscription: ${{ parameters.Subscription }}
        scriptType: inlineScript
        azurePowerShellVersion: LatestVersion
        inline: |
          $autoRollBack = $true
          if ($env:DisableAutoRollBack -eq 'true') {
            $autoRollBack = $false
          }
          if ($env:BUILD_SOURCEBRANCH -eq 'refs/heads/main') {
            $autoRollBack = $false
          }
          eng/deployment/deploy.ps1 -obj $env:BUILD_ARTIFACTSTAGINGDIRECTORY -appPackagePath $env:ApplicationPackage -publishProfile $env:PublishProfilePath -autoRollBack $autoRollBack -location westus2
      env:
        PublishProfilePath: $(Pipeline.Workspace)/MaestroApplication/projectartifacts/PublishProfiles/${{ parameters.PublishProfile }}.xml
        ApplicationPackage: $(Pipeline.Workspace)/MaestroApplication/applicationpackage

- stage: validateDeployment
  displayName: Validate deployment
  dependsOn:
  - deploy
  variables:
  - group: ${{ parameters.VariableGroup }}
  # Secret-Manager-Scenario-Tests provides: secret-manager-scenario-tests-client-secret
  - group: Secret-Manager-Scenario-Tests

  jobs:
  - job: scenario
    displayName: Scenario tests
    timeoutInMinutes: 120
    steps:
    - download: current
      artifact: PackageArtifacts
    - download: current
      artifact: Maestro.ScenarioTests

    - task: NuGetToolInstaller@1
      displayName: Use NuGet
      inputs:
        versionSpec: 5.3.x

    - task: UseDotNet@2
      displayName: Install .NET
      inputs:
        useGlobalJson: true

    - task: VSTest@2
      displayName: Maestro Scenario Tests
      inputs:
        testSelector: testAssemblies
        testAssemblyVer2: |
          Maestro.ScenarioTests.dll
        searchFolder: $(Pipeline.Workspace)/Maestro.ScenarioTests
      env:
        MAESTRO_BASEURI: ${{ parameters.MaestroTestEndpoint }}
        MAESTRO_TOKEN: $(scenario-test-maestro-token)
        GITHUB_TOKEN: $(maestro-scenario-test-github-token)
        AZDO_TOKEN: $(dn-bot-dnceng-build-rw-code-rw-release-rw)
        DARC_PACKAGE_SOURCE: $(Pipeline.Workspace)\PackageArtifacts

    - powershell: |
        nuget sources add -Name "arcade" -Source "https://dotnetfeed.blob.core.windows.net/dotnet-tools-internal/index.json"
        nuget sources add -Name "dotnet-core" -Source "https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json"
      displayName: Add nuget Sources
    - powershell: |
        $versionEndpoint = "${{ parameters.MaestroTestEndpoint }}/api/assets/darc-version?api-version=2019-01-16"
        $latestDarcVersion = $darcVersion = $(Invoke-WebRequest -Uri $versionEndpoint -UseBasicParsing).Content
        Write-Host "##vso[task.setvariable variable=darcVersion]$latestDarcVersion"
        Write-Host "Using Darc version $latestDarcVersion to run the tests"
      displayName: Get DARC version



