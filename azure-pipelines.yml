variables:
  # Cannot use key:value syntax in root defined variables
  - name: _TeamName
    value: DotNetCore
  - name: _PublishUsingPipelines
    value: true
  - name: _DotNetArtifactsCategory
    value: .NETCore
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - group: SDL_Settings

# CI and PR triggers
trigger:
  batch: true
  branches:
    include:
    - main
    - production
pr:
- main
- production

stages:
- stage: GitHub_Issue_Verification
  displayName: GitHub Issue Verification
  condition: and(eq(variables['Build.Reason'], 'PullRequest'), notIn(variables['System.PullRequest.TargetBranch'], 'refs/heads/production', 'production'), notIn(variables['System.PullRequest.SourceBranch'], 'refs/heads/production', 'production'))
  jobs:
    - job: VerifyGitHubIssue
      displayName: Verify GitHub Issue Link included in all PRs
      pool: 
        vmImage: 'windows-latest'
      steps:
        - checkout: self
        - powershell: eng/enforce-issue.ps1 -PullRequestNumber $(System.PullRequest.PullRequestNumber)
          displayName: Enforce GitHub issue link presence

- stage: build
  dependsOn: []
  displayName: Build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: false
      enablePublishBuildArtifacts: true
      enablePublishTestResults: false
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: ${{ variables._PublishUsingPipelines }}
      enableTelemetry: true
      helixRepo: dotnet/arcade-services
      jobs:
      - job: Windows_NT
        timeoutInMinutes: 90
        pool:
          ${{ if eq(variables['System.TeamProject'], 'internal')}}:
            name: NetCore1ESPool-Internal
            demands: ImageOverride -equals 1es-windows-2019
          ${{ if eq(variables['System.TeamProject'], 'public')}}:
            name: NetCore-Public          
            demands: ImageOverride -equals 1es-windows-2019-open

        variables:
        - _InternalBuildArgs: ''
        - _ProductionArgs: ''

        # Only enable publishing in non-public, non PR scenarios.
        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          # DotNet-Blob-Feed provides: dotnetfeed-storage-access-key-1
          # DotNet-Symbol-Server-Pats provides: microsoft-symbol-server-pat, symweb-symbol-server-pat
          # Publish-Build-Assets provides: MaestroAccessToken, BotAccount-dotnet-maestro-bot-PAT
          - group: DotNet-Blob-Feed
          - group: DotNet-Symbol-Server-Pats
          - group: Publish-Build-Assets
          - _PublishBlobFeedUrl: https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
          - _InternalBuildArgs: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName)
              /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)
              /p:DotNetPublishBlobFeedUrl=$(_PublishBlobFeedUrl)
              /p:DotNetPublishToBlobFeed=$(_DotNetPublishToBlobFeed)
              /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines)
              /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory)
              /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
              /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
              /p:OfficialBuildId=$(BUILD.BUILDNUMBER)

        strategy:
          matrix:
            # Only build debug in non-official builds
            ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
                debug_configuration:
                  _BuildConfig: Debug
                  _PublishType: none
                  _SignType: test
                  _DotNetPublishToBlobFeed : false
            release_configuration:
              _BuildConfig: Release
              # PRs or external builds are not signed.
              ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
                _PublishType: none
                _SignType: test
                _DotNetPublishToBlobFeed : false
              ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
                _PublishType: blob
                _SignType: test
                _DotNetPublishToBlobFeed : true
        steps:
        - checkout: self
          clean: true

        - task: UseDotNet@2
          displayName: Install Correct .NET Version
          inputs:
            useGlobalJson: true

        - task: UseDotNet@2
          displayName: Install .NET Version 3.1
          inputs:
            version: 3.1.x

        - task: NuGetToolInstaller@0
          inputs:
            versionSpec: 6.1.x

        - task: NodeTool@0
          inputs:
            versionSpec: 12.x

        - task: NuGetCommand@2
          displayName: Restore Packages
          inputs:
            command: restore
            solution: "**/*.sln"
            feedstoUse: config

        - powershell: eng\set-version-parameters.ps1
          displayName: Calculate release version variables

        - powershell: |
            [xml]$manifest = Get-Content src\Maestro\MaestroApplication\ApplicationPackageRoot\ApplicationManifest.xml
            $manifest.SelectSingleNode("/*[local-name()='ApplicationManifest']/*[local-name()='Policies']").RemoveAll()
            $manifest.SelectSingleNode("/*[local-name()='ApplicationManifest']/*[local-name()='Principals']").RemoveAll()
            $manifest.Save("src\Maestro\MaestroApplication\ApplicationPackageRoot\ApplicationManifest.xml")
            git diff
          displayName: Remove Service Fabric RunAsPolicy from MaestroApplication

        - script: eng\common\cibuild.cmd
            -configuration $(_BuildConfig)
            -prepareMachine
            $(_InternalBuildArgs)
            $(_ProductionArgs)
            /p:Test=false
            /P:Sign=false
          name: Build
          displayName: Build / Publish
          condition: succeeded()
        
        - powershell: |
            dotnet tool restore
            $manifestArgs = @()
            Get-ChildItem .vault-config/*.yaml |% {
              $manifestArgs += @("-m", $_.FullName)
            }
            dotnet secret-manager validate-all -b src @manifestArgs
          displayName: Verify Secret Usages

        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:

          - task: ComponentGovernanceComponentDetection@0
            inputs:
              # `.packages` directory is used by some tools running during build.
              # By default ComponentDetection scans this directory and sometimes reports
              # vulnerabilities for packages that are not part of the published product.
              # We can ignore this directory because actual vulnerabilities
              # that we are interested in will be found by the tool
              # when scanning .csproj and package.json files.
              ignoreDirectories: '.packages'

        - ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
          - template: /eng/test.yaml

        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:

          ## Prepare service fabric artifact
          - task: ServiceFabricUpdateManifests@2
            inputs:
              applicationPackagePath: $(Build.ArtifactStagingDirectory)\ServiceFabric\MaestroApplication\applicationpackage

          - powershell: |
              robocopy src/Maestro/MaestroApplication/PublishProfiles $(Build.ArtifactStagingDirectory)\ServiceFabric\MaestroApplication\projectartifacts\PublishProfiles /S *.xml
              robocopy src/Maestro/MaestroApplication/ApplicationParameters $(Build.ArtifactStagingDirectory)\ServiceFabric\MaestroApplication\projectartifacts\ApplicationParameters /S *.xml
              robocopy src/Maestro/MaestroApplication/ApplicationPackageRoot $(Build.ArtifactStagingDirectory)\ServiceFabric\MaestroApplication\projectartifacts\ApplicationPackageRoot /S *.xml
              exit 0
            displayName: Copy Maestro Project Artifacts

          - publish: $(Build.ArtifactStagingDirectory)\ServiceFabric\MaestroApplication
            artifact: MaestroApplication
            displayName: Publish MaestroApplication

          ## Generate SBOM manifest
          - template: ../../../generate-sbom.yml

          ## Prepare database update artifact
          - script: $(Build.SourcesDirectory)\.dotnet\dotnet publish -o $(Build.ArtifactStagingDirectory)\Maestro.Data -f net6.0
            workingDirectory: src/Maestro/Maestro.Data
            displayName: Create Data Package

          - task: CopyFiles@2
            displayName: Copy update-database.ps1
            inputs:
              sourceFolder: $(Build.SourcesDirectory)\src\Maestro
              contents: update-database.ps1
              targetFolder: $(Build.ArtifactStagingDirectory)\Maestro.Data\

          - publish: $(Build.ArtifactStagingDirectory)\Maestro.Data
            artifact: Maestro.Data
            displayName: Publish Maestro.Data Artifact

          ## Prepare release utilities artifact
          - task: CopyFiles@2
            displayName: Prepare Release Utilities
            inputs:
              sourceFolder: $(Build.SourcesDirectory)\eng
              contents: '*'
              targetFolder: $(Build.ArtifactStagingDirectory)\eng

          - publish: $(Build.ArtifactStagingDirectory)\eng
            artifact: ReleaseUtilities
            displayName: Publish Release Utilities Artifact

          - publish: $(Build.SourcesDirectory)\artifacts\bin\Maestro.ScenarioTests\$(_BuildConfig)\net6.0\publish
            artifact: Maestro.ScenarioTests
            displayName: Publish Maestro Scenario Tests

- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - template: eng\common\templates\post-build\post-build.yml
    parameters:
      enableSymbolValidation: true
      enableSigningValidation: false
      artifactsPublishingAdditionalParameters: '/p:CheckEolTargetFramework=false'
      symbolPublishingAdditionalParameters: '/p:CheckEolTargetFramework=false'
      # This is to enable SDL runs part of Post-Build Validation Stage
      SDLValidationParameters:
        enable: true
        params: '-SourceToolsList @("policheck","credscan")
        -TsaInstanceURL $(_TsaInstanceURL)
        -TsaProjectName $(_TsaProjectName)
        -TsaNotificationEmail $(_TsaNotificationEmail)
        -TsaCodebaseAdmin $(_TsaCodebaseAdmin)
        -TsaBugAreaPath $(_TsaBugAreaPath)
        -TsaIterationPath $(_TsaIterationPath)
        -TsaRepositoryName "Arcade-Services"
        -TsaCodebaseName "Arcade-Services"
        -TsaPublish $True
        -PoliCheckAdditionalRunConfigParams @("UserExclusionPath < $(Build.SourcesDirectory)/eng/PoliCheckExclusions.xml")'
- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), in(variables['Build.SourceBranch'], 'refs/heads/main', 'refs/heads/production'))}}:
  - template: eng\deploy.yaml
    parameters:
      ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/production') }}:
        DeploymentEnvironment: Staging
        MaestroPublishEndpoint: https://maestro-prod.westus2.cloudapp.azure.com
        MaestroTestEndpoint: https://maestro-int.westus2.cloudapp.azure.com
        PublishProfile: Int
        ServiceFabricConnection: Maestro-Int
        Subscription: NetHelixStaging
        VariableGroup: MaestroInt KeyVault
      ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/production') }}:
        DeploymentEnvironment: Production
        MaestroPublishEndpoint: https://maestro-prod.westus2.cloudapp.azure.com
        MaestroTestEndpoint: https://maestro-prod.westus2.cloudapp.azure.com
        PublishProfile: Prod
        ServiceFabricConnection: Maestro-Prod
        Subscription: NetHelix
        VariableGroup: MaestroProd KeyVault
