variables:
# Cannot use key:value syntax in root defined variables
- name: _TeamName
  value: DotNetCore
- name: _PublishUsingPipelines
  value: true
- name: _DotNetArtifactsCategory
  value: .NETCore
- name: AzdoOrgUri
  value: https://dev.azure.com/dnceng
- name: AzdoProject
  value: internal
- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - group: SDL_Settings

# CI and PR triggers
trigger:
  batch: true
  branches:
    include:
    - main
    - production
pr:
  branches:
    include:
    - main
    - production
  paths:
    include:
    - '*'
    exclude:
    - '**/*.md'
    - '.github/*'
    - 'docs/*'
    - CODE-OF-CONDUCT.md
    - LICENSE.TXT
    - README.md
    - SECURITY.md
    - THIRD-PARTY-NOTICES.TXT

pool:
  name: NetCore1ESPool-Internal-NoMSI
  demands: ImageOverride -equals 1es-windows-2019

stages:
- ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
  - stage: GitHub_Issue_Verification
    displayName: GitHub Issue Verification
    dependsOn: []
    # System.PullRequest.TargetBranch only evaulates during runtime conditions
    condition: and(notIn(variables['System.PullRequest.TargetBranch'], 'refs/heads/production', 'production'), notIn(variables['System.PullRequest.SourceBranch'], 'refs/heads/production', 'production'))
    jobs:
    - job: VerifyGitHubIssue
      displayName: Verify GitHub Issue Link included in all PRs
      pool:
        vmImage: windows-latest
      steps:
      - checkout: self
      - powershell: eng/enforce-issue.ps1 -PullRequestNumber $(System.PullRequest.PullRequestNumber) -RepositoryName $(Build.Repository.Name)
        displayName: Enforce GitHub issue link presence

- stage: build
  dependsOn: []
  displayName: Build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      artifacts:
        publish:
          logs: true
          ${{ if in(variables['Build.SourceBranch'], 'refs/heads/main', 'refs/heads/production') }}:
            artifacts: true
            manifests: true
      enableTelemetry: true
      enableMicrobuild: false
      enablePublishTestResults: false
      enablePublishUsingPipelines: ${{ variables._PublishUsingPipelines }}

      jobs:
      - job: Windows_NT
        timeoutInMinutes: 90
        pool:
          ${{ if eq(variables['System.TeamProject'], 'internal')}}:
            name: NetCore1ESPool-Internal
            demands: ImageOverride -equals 1es-windows-2019
          ${{ if eq(variables['System.TeamProject'], 'public')}}:
            name: NetCore-Public
            demands: ImageOverride -equals 1es-windows-2019-open

        variables:
        - _InternalBuildArgs: ''

        # Only enable publishing in non-public, non PR scenarios.
        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
          # DotNet-Symbol-Server-Pats provides: microsoft-symbol-server-pat, symweb-symbol-server-pat
          # Publish-Build-Assets provides: MaestroAccessToken, BotAccount-dotnet-maestro-bot-PAT
          - group: DotNet-Symbol-Server-Pats
          - group: Publish-Build-Assets
          - _InternalBuildArgs: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName)
              /p:DotNetPublishUsingPipelines=$(_PublishUsingPipelines)
              /p:DotNetArtifactsCategory=$(_DotNetArtifactsCategory)
              /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
              /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
              /p:OfficialBuildId=$(BUILD.BUILDNUMBER)

        strategy:
          matrix:
            # Only build debug in non-official builds
            ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
                debug_configuration:
                  _BuildConfig: Debug
                  _PublishType: none
                  _SignType: test
            release_configuration:
              _BuildConfig: Release
              # PRs or external builds are not signed.
              ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
                _PublishType: none
                _SignType: test
              ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
                _PublishType: blob
                _SignType: test
        steps:
        - checkout: self
          clean: true

        - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/production')}}:
          - template: /eng/common/templates/steps/retain-build.yml
            parameters:
              AzdoOrgUri: $(AzdoOrgUri)
              AzdoProject: $(AzdoProject)
              BuildId: $(Build.BuildId)

        - template: /eng/templates/steps/build.yml
          parameters:
            configuration: $(_BuildConfig)
            buildArgs: $(_InternalBuildArgs)

        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:

          - task: ComponentGovernanceComponentDetection@0
            displayName: Component Governance Detection
            inputs:
              # `.packages` directory is used by some tools running during build.
              # By default ComponentDetection scans this directory and sometimes reports
              # vulnerabilities for packages that are not part of the published product.
              # We can ignore this directory because actual vulnerabilities
              # that we are interested in will be found by the tool
              # when scanning .csproj and package.json files.
              ignoreDirectories: .packages

        - ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
          - template: /eng/templates/steps/test.yml

        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:

          ## Prepare service fabric artifact
          - task: ServiceFabricUpdateManifests@2
            displayName: Update Service Fabric manifests
            inputs:
              applicationPackagePath: $(Build.ArtifactStagingDirectory)\ServiceFabric\MaestroApplication\applicationpackage

          - powershell: |
              robocopy src/Maestro/MaestroApplication/PublishProfiles $(Build.ArtifactStagingDirectory)\ServiceFabric\MaestroApplication\projectartifacts\PublishProfiles /S *.xml
              robocopy src/Maestro/MaestroApplication/ApplicationParameters $(Build.ArtifactStagingDirectory)\ServiceFabric\MaestroApplication\projectartifacts\ApplicationParameters /S *.xml
              robocopy src/Maestro/MaestroApplication/ApplicationPackageRoot $(Build.ArtifactStagingDirectory)\ServiceFabric\MaestroApplication\projectartifacts\ApplicationPackageRoot /S *.xml
              exit 0
            displayName: Copy Maestro Project Artifacts

          - publish: $(Build.ArtifactStagingDirectory)\ServiceFabric\MaestroApplication
            artifact: MaestroApplication
            displayName: Publish MaestroApplication

          ## Generate SBOM manifest
          - template: /eng/templates/steps/generate-sbom.yml

          ## Prepare release utilities artifact
          - task: CopyFiles@2
            displayName: Prepare Release Utilities
            inputs:
              sourceFolder: $(Build.SourcesDirectory)\eng
              contents: '*'
              targetFolder: $(Build.ArtifactStagingDirectory)\eng

          - publish: $(Build.ArtifactStagingDirectory)\eng
            artifact: ReleaseUtilities
            displayName: Publish Release Utilities Artifact

          - publish: $(Build.SourcesDirectory)\artifacts\bin\Maestro.ScenarioTests\$(_BuildConfig)\net6.0\publish
            artifact: Maestro.ScenarioTests
            displayName: Publish Maestro Scenario Tests

- ${{ if and(ne(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'), in(variables['Build.SourceBranch'], 'refs/heads/main', 'refs/heads/production')) }}:
  - template: /eng/common/templates/post-build/post-build.yml
    parameters:
      enableSymbolValidation: true
      enableSigningValidation: false
      artifactsPublishingAdditionalParameters: '/p:CheckEolTargetFramework=false'
      symbolPublishingAdditionalParameters: '/p:CheckEolTargetFramework=false'
      # This is to enable SDL runs part of Post-Build Validation Stage
      SDLValidationParameters:
        enable: true
        params: '-SourceToolsList @("policheck","credscan")
        -TsaInstanceURL $(_TsaInstanceURL)
        -TsaProjectName $(_TsaProjectName)
        -TsaNotificationEmail $(_TsaNotificationEmail)
        -TsaCodebaseAdmin $(_TsaCodebaseAdmin)
        -TsaBugAreaPath $(_TsaBugAreaPath)
        -TsaIterationPath $(_TsaIterationPath)
        -TsaRepositoryName "Arcade-Services"
        -TsaCodebaseName "Arcade-Services"
        -TsaPublish $True
        -PoliCheckAdditionalRunConfigParams @("UserExclusionPath < $(Build.SourcesDirectory)/eng/PoliCheckExclusions.xml")'

- ${{ if ne(variables['System.TeamProject'], 'public') }}:
  - template: /eng/templates/stages/deploy.yaml
    parameters:
      ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/production') }}:
        DeploymentEnvironment: Staging
        MaestroTestEndpoints: https://maestro-int.westus2.cloudapp.azure.com,https://maestro.int-dot.net
        PublishProfile: Int
        Subscription: NetHelixStaging
        VariableGroup: MaestroInt KeyVault
      ${{ else }}:
        DeploymentEnvironment: Production
        MaestroTestEndpoints: https://maestro-prod.westus2.cloudapp.azure.com,https://maestro.dot.net
        PublishProfile: Prod
        Subscription: NetHelix
        VariableGroup: MaestroProd KeyVault
