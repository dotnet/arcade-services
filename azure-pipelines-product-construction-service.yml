trigger:
  batch: true
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

variables:
# https://dev.azure.com/dnceng/internal/_library?itemType=VariableGroups&view=VariableGroupView&variableGroupId=189
- group: Publish-Build-Assets
- name: resourceGroupName
  value: product-construction-service
- name: containerName
  value: product-construction-service.api
- name: diffFolder
  value: $(Build.ArtifactStagingDirectory)/diff
- name: _TeamName
  value: DotNetCore
- name: _PublishUsingPipelines
  value: true
- name: _DotNetArtifactsCategory
  value: .NETCore
- name: _SignType
  value: test
- ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/production') }}:
  - name: subscriptionId
    value: e6b5f9f5-0ca4-4351-879b-014d78400ec2
  - name: containerappName
    value: product-construction-int
  - name: containerjobNames
    value: sub-triggerer-twicedaily-int,sub-triggerer-daily-int,sub-triggerer-weekly-int,longest-path-updater-job-int,feed-cleaner-int
  - name: containerRegistryName
    value: productconstructionint
  - name: containerappEnvironmentName
    value: product-construction-service-env-int
  - name: containerappWorkspaceName
    value: product-construction-service-workspace-int
  - name: dockerRegistryUrl
    value: productconstructionint.azurecr.io
  - name: serviceConnectionName
    value: ProductConstructionServiceDeploymentInt
  - name: authServiceConnection
    value: "Darc: Maestro Staging"
  - name: MaestroAppId
    value: $(MaestroStagingAppClientId)
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
    - name: devBranchSuffix
      value:
  - ${{ else }}:
    - name: devBranchSuffix
      value: -dev

stages:
- stage: DeployPCS
  displayName: Deploy Product Construction Service
  dependsOn: []
  jobs:
  - job: DeployPCS
    displayName: Deploy Product Construction Service
    pool:
      name: NetCore1ESPool-Internal
      demands: ImageOverride -equals 1es-ubuntu-2004

    steps:
    - checkout: self

    - template: eng/templates/steps/docker-build.yml
      parameters:
        devBranchSuffix: $(devBranchSuffix)
        dockerImageName: $(dockerRegistryUrl)/$(containerName)

    - ${{ if notin(variables['Build.Reason'], 'PullRequest') }}:
      - ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/production') }}:
        - task: AzureCLI@2
          inputs:
            azureSubscription: $(serviceConnectionName)
            scriptType: pscore
            scriptLocation: inlineScript
            inlineScript: |
              New-Item -ItemType Directory -Path $(diffFolder)
              $before = az containerapp show --name $(containerappName) -g $(resourceGroupName) --output json
              Set-Content -Path $(diffFolder)/before.json -Value $before
          displayName: Snapshot configuration (before)

        - task: AzureCLI@2
          name: GetAuthInfo
          displayName: Get PCS Token
          inputs:
            azureSubscription: $(authServiceConnection)
            addSpnToEnvironment: true
            scriptType: pscore
            scriptLocation: inlineScript
            inlineScript: |
              # Fetch pcs token
              $token = (az account get-access-token --resource "$(MaestroAppId)" | ConvertFrom-Json).accessToken
              "##vso[task.setvariable variable=Token;isOutput=true;isSecret=true]$token"

        - task: AzureCLI@2
          inputs:
            azureSubscription: $(serviceConnectionName)
            scriptType: pscore
            scriptLocation: scriptPath
            scriptPath: $(Build.SourcesDirectory)/eng/deployment/product-construction-service-deploy.ps1
            arguments: >
              -subscriptionId $(subscriptionId)
              -resourceGroupName $(resourceGroupName)
              -containerappName $(containerappName)
              -workspaceName $(containerappWorkspaceName)
              -newImageTag $(DockerTag.newDockerImageTag)
              -containerRegistryName $(containerRegistryName)
              -imageName $(containerName)
              -token $(GetAuthInfo.Token)
              -containerjobNames '$(containerjobNames)'
          displayName: Deploy container app

        - task: AzureCLI@2
          inputs:
            azureSubscription: $(serviceConnectionName)
            scriptType: pscore
            scriptLocation: inlineScript
            inlineScript: |
              $after = az containerapp show --name $(containerappName) -g $(resourceGroupName) --output json
              Set-Content -Path $(diffFolder)/after.json -Value $after
          displayName: Snapshot configuration (after)

        # git diff will set the exit code to 1, since the files are different, we have to manually set it back to 0
        - powershell: |
            $diff = git diff before.json after.json
            $LASTEXITCODE = 0
            Set-Content -Path diff -Value $diff
          displayName: Diff configuration snapshots
          workingDirectory: $(diffFolder)

        - publish: $(diffFolder)
          displayName: Upload snapshot diff
          artifact: DeploymentDiff

- stage: BuildRepo
  displayName: Build and Publish Repo
  dependsOn: []
  jobs:
  - job: BuildAndPublish
    displayName: Build and Publish Repo
    pool:
      name: NetCore1ESPool-Internal
      demands: ImageOverride -equals 1es-windows-2019

    variables:
    - name: BuildConfig
      value: Release

    steps:
    - checkout: self

    - powershell: |
        . .\eng\common\tools.ps1
        InitializeDotNetCli -install:$true
        .\.dotnet\dotnet workload update --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public/nuget/v3/index.json
        .\.dotnet\dotnet workload install aspire --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public/nuget/v3/index.json
      displayName: Install .NET and Aspire Workload

    - powershell: >
        .\eng\common\build.ps1
        -restore
        -pack
        -configuration $(BuildConfig)
        -projects .\src\Microsoft.DotNet.Darc\Darc\Microsoft.DotNet.Darc.csproj
      displayName: Build Darc

    - powershell: >
        .\eng\common\build.ps1
        -restore
        -build
        -configuration $(BuildConfig)
        -projects .\test\ProductConstructionService.ScenarioTests\ProductConstructionService.ScenarioTests.csproj
      displayName: Build ScenarioTests

    - publish: $(Build.SourcesDirectory)\artifacts\bin\ProductConstructionService.ScenarioTests\$(BuildConfig)\net8.0\publish
      artifact: ProductConstructionService.ScenarioTests

    - publish: $(Build.SourcesDirectory)\artifacts\packages\$(BuildConfig)\NonShipping
      artifact: PackageArtifacts

- stage: TestPCS
  displayName: Run E2E Product Construction Service Tests
  dependsOn:
  - DeployPCS
  - BuildRepo

  jobs:
  - template: /eng/templates/jobs/e2e-pcs-tests.yml
    parameters:
      name: scenarioTests_GitHub
      displayName: GitHub tests
      testFilter: 'TestCategory=GitHub'

  - template: /eng/templates/jobs/e2e-pcs-tests.yml
    parameters:
      name: scenarioTests_AzDO
      displayName: AzDO tests
      testFilter: 'TestCategory=AzDO'

  - template: /eng/templates/jobs/e2e-pcs-tests.yml
    parameters:
      name: scenarioTests_Other
      displayName: Other tests
      testFilter: 'TestCategory!=GitHub&TestCategory!=AzDO'
