// <auto-generated>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
//
// </auto-generated>

namespace Microsoft.DotNet.Maestro.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Assets.
    /// </summary>
    public static partial class AssetsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='version'>
            /// </param>
            /// <param name='buildId'>
            /// </param>
            /// <param name='nonShipping'>
            /// </param>
            /// <param name='loadLocations'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='perPage'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Asset>> GetAsync(this IAssets operations, string name = default(string), string version = default(string), int? buildId = default(int?), bool? nonShipping = default(bool?), bool? loadLocations = default(bool?), int? page = default(int?), int? perPage = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(name, version, buildId, nonShipping, loadLocations, page, perPage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Asset> GetAssetAsync(this IAssets operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAssetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='location'>
            /// </param>
            /// <param name='assetLocationType'>
            /// Possible values include: 'none', 'nugetFeed', 'container'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AssetLocation> AddAssetLocationToAssetAsync(this IAssets operations, int assetId, string location, string assetLocationType, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddAssetLocationToAssetWithHttpMessagesAsync(assetId, location, assetLocationType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='assetLocationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveAssetLocationFromAssetAsync(this IAssets operations, int assetId, int assetLocationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveAssetLocationFromAssetWithHttpMessagesAsync(assetId, assetLocationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
