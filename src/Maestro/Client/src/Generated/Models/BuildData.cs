// <auto-generated>
// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.
//
// </auto-generated>

namespace Microsoft.DotNet.Maestro.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class BuildData
    {
        /// <summary>
        /// Initializes a new instance of the BuildData class.
        /// </summary>
        public BuildData()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BuildData class.
        /// </summary>
        public BuildData(string commit, string azureDevOpsAccount, string azureDevOpsProject, string azureDevOpsBuildNumber, string azureDevOpsRepository, string azureDevOpsBranch, IList<AssetData> assets = default(IList<AssetData>), IList<int?> dependencies = default(IList<int?>), int? azureDevOpsBuildId = default(int?), int? azureDevOpsBuildDefinitionId = default(int?), string gitHubRepository = default(string), string gitHubBranch = default(string))
        {
            Commit = commit;
            Assets = assets;
            Dependencies = dependencies;
            AzureDevOpsBuildId = azureDevOpsBuildId;
            AzureDevOpsBuildDefinitionId = azureDevOpsBuildDefinitionId;
            AzureDevOpsAccount = azureDevOpsAccount;
            AzureDevOpsProject = azureDevOpsProject;
            AzureDevOpsBuildNumber = azureDevOpsBuildNumber;
            AzureDevOpsRepository = azureDevOpsRepository;
            AzureDevOpsBranch = azureDevOpsBranch;
            GitHubRepository = gitHubRepository;
            GitHubBranch = gitHubBranch;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "commit")]
        public string Commit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "assets")]
        public IList<AssetData> Assets { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dependencies")]
        public IList<int?> Dependencies { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "azureDevOpsBuildId")]
        public int? AzureDevOpsBuildId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "azureDevOpsBuildDefinitionId")]
        public int? AzureDevOpsBuildDefinitionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "azureDevOpsAccount")]
        public string AzureDevOpsAccount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "azureDevOpsProject")]
        public string AzureDevOpsProject { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "azureDevOpsBuildNumber")]
        public string AzureDevOpsBuildNumber { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "azureDevOpsRepository")]
        public string AzureDevOpsRepository { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "azureDevOpsBranch")]
        public string AzureDevOpsBranch { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gitHubRepository")]
        public string GitHubRepository { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "gitHubBranch")]
        public string GitHubBranch { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Commit == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Commit");
            }
            if (AzureDevOpsAccount == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AzureDevOpsAccount");
            }
            if (AzureDevOpsProject == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AzureDevOpsProject");
            }
            if (AzureDevOpsBuildNumber == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AzureDevOpsBuildNumber");
            }
            if (AzureDevOpsRepository == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AzureDevOpsRepository");
            }
            if (AzureDevOpsBranch == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AzureDevOpsBranch");
            }
        }
    }
}
