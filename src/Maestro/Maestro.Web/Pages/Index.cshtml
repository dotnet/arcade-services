@page
@model Maestro.Web.Pages.IndexModel
@using Maestro.Data
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@{
    ViewBag.Title = "Index";
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />

    <title>@ViewBag.Title - @ViewBag.Brand</title>
    <base href="/" />

    <style type="text/css">
        body,
        html {
            height: 100%;
        }

        .app-loading {
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            overflow: hidden;
        }

        .app-loading .spinner {
            height: 200px;
            width: 200px;
            animation: rotate 2s linear infinite;
            transform-origin: center center;
            position: absolute;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            margin: auto;
        }

        .app-loading .spinner .path {
            stroke-dasharray: 1, 200;
            stroke-dashoffset: 0;
            animation: dash 1.5s ease-in-out infinite;
            stroke-linecap: round;
            stroke: #ddd;
        }

        @@keyframes rotate {
            100% {
                transform: rotate(360deg);
            }
        }

        @@keyframes dash {
            0% {
                stroke-dasharray: 1, 200;
                stroke-dashoffset: 0;
            }

            50% {
                stroke-dasharray: 89, 200;
                stroke-dashoffset: -35px;
            }

            100% {
                stroke-dasharray: 89, 200;
                stroke-dashoffset: -124px;
            }
        }
    </style>

    <script type="text/javascript">
        window.applicationData = {
          brand: '@Html.Raw(ViewBag.Brand)',
          userName: '@await GetUserNameAsync()',
        };
    </script>
    @Model.GetStyleBundles()
</head>
<body>
<mc-root>
    <div class="app-loading">
        <div class="logo"></div>
        <svg class="spinner" viewBox="25 25 50 50">
            <circle class="path" cx="50" cy="50" r="20" fill="none" stroke-width="2" stroke-miterlimit="10" />
        </svg>
    </div>
</mc-root>
    @Model.GetScriptBundles()
</body>
</html>

@inject UserManager<ApplicationUser> UserManager

@functions
{

async Task<string> GetUserNameAsync()
{
    ApplicationUser user = await UserManager.GetUserAsync(HttpContext.User);
    return user?.FullName;
}

}
