@page "/pullrequests"

@using Microsoft.DotNet.ProductConstructionService.Client
@using Microsoft.DotNet.ProductConstructionService.Client.Models
@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using System.Linq.Expressions
@using ProductConstructionService.BarViz.Components
@inject IProductConstructionServiceApi PcsApi

<PageTitle>Tracked Pull Requests</PageTitle>

<GridViewTemplate Title="@($"Pull Requests ({TrackedPullRequests?.Count().ToString() ?? "0"})")" ShowSkeleton="TrackedPullRequests == null">
    <Content>
        <FluentDataGrid Id="pullRequestsGrid" Items="@TrackedPullRequests" GridTemplateColumns="3fr 2fr 2fr 1fr 1fr 60px" TGridItem=TrackedPullRequest Style="width: 100%">
            <TemplateColumn Sortable="true" SortBy="SortBy(pr => pr.Url)" Align="Align.Start" Title="Pull request">
                <FluentAnchor Href="@context.Url" Target="_blank" Appearance="Appearance.Hypertext">@context.Url</FluentAnchor>
            </TemplateColumn>
            <TemplateColumn Sortable="true" SortBy="SortBy(pr => pr.Channel)" Align="Align.Center" Title="Channel">
                <FluentLabel>@(context.Channel ?? "N/A")</FluentLabel>
            </TemplateColumn>
            <TemplateColumn Sortable="true" SortBy="SortBy(pr => pr.TargetBranch)" Align="Align.Center" Title="Target branch">
                <FluentLabel>@(context.TargetBranch ?? "N/A")</FluentLabel>
            </TemplateColumn>
            <TemplateColumn Sortable="true" SortBy="SortBy(pr => pr.LastUpdate.ToString())" Align="Align.Center" Title="Last Update">
                <FluentLabel>@((DateTime.UtcNow - context.LastUpdate).ToTimeAgo())</FluentLabel>
            </TemplateColumn>
            <TemplateColumn Sortable="true" SortBy="SortBy(pr => pr.LastCheck.ToString())" Align="Align.Center" Title="Last Check">
                <FluentLabel>
                    @((DateTime.UtcNow - context.LastCheck).ToTimeAgo())
                    @if (DateTime.UtcNow - context.LastCheck > TimeSpan.FromHours(1))
                    {
                        <FluentIcon Value="@(new Icons.Filled.Size20.Warning())"
                        Color="Color.Warning"
                        Title="PR has not been checked on by PCS in a while" />
                    }
                    @if (!context.NextCheck.HasValue)
                    {
                        <FluentIcon Value="@(new Icons.Filled.Size20.Warning())"
                        Color="Color.Warning"
                        Title="No future check set for this PR" />
                    }
                </FluentLabel>
            </TemplateColumn>
            <TemplateColumn>
                <PullRequestContextMenu PullRequest="@context" Refresh="@LoadDataAsync" IsAdmin="false" />
            </TemplateColumn>
        </FluentDataGrid>
    </Content>
</GridViewTemplate>

@code {
    IQueryable<TrackedPullRequest>? TrackedPullRequests = null;
    Timer? _timer;
    GridSort<TrackedPullRequest> SortBy(Expression<Func<TrackedPullRequest, string>> sorter)
        => GridSort<TrackedPullRequest>.ByAscending(sorter);

    protected override void OnInitialized()
    {
        _timer = new Timer(async _ => await LoadDataAsync(), null, TimeSpan.Zero, TimeSpan.FromSeconds(30));
    }

    async Task LoadDataAsync()
    {
        TrackedPullRequests = (await PcsApi.PullRequest.GetTrackedPullRequestsAsync()).Select(pr =>
        {
            pr.Id = Guid.NewGuid().ToString();
            return pr;
        }).AsQueryable();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
}
