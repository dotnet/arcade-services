@page "/pullrequests"

@using Microsoft.DotNet.ProductConstructionService.Client
@using Microsoft.DotNet.ProductConstructionService.Client.Models
@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@using System.Linq.Expressions
@using ProductConstructionService.BarViz.Code.Helpers
@using ProductConstructionService.BarViz.Components
@inject IProductConstructionServiceApi PcsApi

<style>
    .hover:not([row-type='header'],[row-type='sticky-header'],.loading-content-row):hover[b-upi3f9mbnn] {
        cursor: default;
    }
</style>

<PageTitle>Tracked Pull Requests</PageTitle>

<div style="float: right">
    <FluentSwitch Label="Auto-refresh"
                  CheckedMessage="30s"
                  UncheckedMessage="off"
                  Value="@_autoRefresh"
                  ValueChanged="@SetAutoRefresh" />
</div>

<GridViewTemplate Title="@($"Pull Requests ({TrackedPullRequests?.Count().ToString() ?? "0"})")" ShowSkeleton="TrackedPullRequests == null">
    <Content>
        <FluentDataGrid Id="pullRequestsGrid"
                        Items="@TrackedPullRequests"
                        AutoFit="true"
                        TGridItem=TrackedPullRequest
                        ShowHover="true"
                        ResizableColumns="true"
                        Style="width: 100%">
            <EmptyContent>
                <FluentLabel>No pull requests found</FluentLabel>
            </EmptyContent>
            <ChildContent>
                <TemplateColumn Sortable="true" SortBy="SortBy(pr => pr.Url)" Align="Align.Start" Title="Pull request">
                    <FluentAnchor Href="@context.Url" Target="_blank" Appearance="Appearance.Hypertext" Id="@("prUrl_" + context.Id)">@context.Url</FluentAnchor>
                    @if (context.Updates.Count > 0)
                    {
                        <FluentTooltip Anchor="@("prUrl_" + context.Id)">
                            <h4>In this PR</h4>
                            @foreach (var update in context.Updates)
                            {
                                <div>
                                    <h5>@update.SourceRepository</h5>
                                    <strong>Build ID:</strong> @update.BuildId
                                    <br />
                                    <strong>Subscription ID:</strong> @update.SubscriptionId
                                    <br />
                                    @if (context.Channel != null)
                                    {
                                        <FluentAnchor Href="@GetBuildLink(update.SourceRepository, context.Channel, update.BuildId)" Appearance="Appearance.Hypertext">Build details</FluentAnchor>
                                    }
                                    <FluentDivider />
                                </div>
                            }
                        </FluentTooltip>
                    }
                </TemplateColumn>
                <TemplateColumn Title="Channel" Sortable="true" SortBy="SortBy(pr => pr.Channel != null ? pr.Channel.Name : string.Empty)" Align="Align.Center">
                    <FluentLabel>@(context.Channel?.Name ?? "N/A")</FluentLabel>
                </TemplateColumn>
                <TemplateColumn Title="Target branch" Sortable="true" SortBy="SortBy(pr => pr.TargetBranch)" Align="Align.Center">
                    <FluentLabel>@(context.TargetBranch ?? "N/A")</FluentLabel>
                </TemplateColumn>
                <TemplateColumn Title="Last Update" Sortable="true" SortBy="SortBy(pr => pr.LastUpdate.ToString())" Align="Align.Center">
                    <FluentLabel Title="@(context.LastUpdate == default ? "N/A" : context.LastUpdate.ToString("f"))">
                        @(context.LastUpdate == default ? "N/A" : (DateTime.UtcNow - context.LastUpdate).ToTimeAgo())
                    </FluentLabel>
                </TemplateColumn>
                <TemplateColumn Sortable="true" SortBy="SortBy(pr => pr.LastCheck.ToString())" Align="Align.Center" Title="Last Check">
                    <FluentLabel Id="@("lastCheck_" + context.Id)">
                        @(context.LastCheck == default ? "N/A" : (DateTime.UtcNow - context.LastCheck).ToTimeAgo())
                        @if (DateTime.UtcNow - context.LastCheck > TimeSpan.FromHours(1))
                        {
                            <FluentIcon Value="@(new Icons.Filled.Size20.Warning())"
                                        Color="Color.Warning"
                                        Title="PR has not been checked on by PCS in a while" />
                        }
                        @if (!context.NextCheck.HasValue)
                        {
                            <FluentIcon Value="@(new Icons.Filled.Size20.Warning())"
                                        Color="Color.Warning"
                                        Title="No future check set for this PR" />
                        }
                    </FluentLabel>
                </TemplateColumn>
                <TemplateColumn Style="width:60px">
                    <PullRequestContextMenu PullRequest="@context" Refresh="@LoadDataAsync" />
                </TemplateColumn>
            </ChildContent>
        </FluentDataGrid>
    </Content>
</GridViewTemplate>

@code {
    IQueryable<TrackedPullRequest>? TrackedPullRequests = null;
    Timer? _timer;
    GridSort<TrackedPullRequest> SortBy(Expression<Func<TrackedPullRequest, string>> sorter)
        => GridSort<TrackedPullRequest>.ByAscending(sorter);
    bool _autoRefresh = true;

    protected override void OnInitialized()
    {
        _timer = new Timer(async _ => await LoadDataAsync(), null, TimeSpan.Zero, TimeSpan.FromSeconds(30));
    }

    async Task LoadDataAsync()
    {
        if (_autoRefresh)
        {
            TrackedPullRequests = (await PcsApi.PullRequest.GetTrackedPullRequestsAsync()).AsQueryable();
            await InvokeAsync(StateHasChanged);
        }
    }

    public static string GetBuildLink(string repoUrl, Microsoft.DotNet.ProductConstructionService.Client.Models.Channel channel, int buildId)
    {
        return $"/channel/{channel.Id}/{RepoUrlConverter.RepoUrlToSlug(repoUrl)}/build/{buildId}";
    }

    void SetAutoRefresh(bool value)
    {
        _autoRefresh = value;

        if (value)
        {
            OnInitialized();
        }
        else
        {
            _timer?.Dispose();
        }
    }

    public void Dispose()
    {
        if (_autoRefresh)
        {
            _timer?.Dispose();
        }
    }
}
