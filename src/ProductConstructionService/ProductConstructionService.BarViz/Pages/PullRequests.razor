@page "/pullrequests"

@using Microsoft.DotNet.ProductConstructionService.Client
@using Microsoft.DotNet.ProductConstructionService.Client.Models;
@using System.Linq.Expressions
@inject IProductConstructionServiceApi api

<PageTitle>Tracked Pull Requests</PageTitle>

<GridViewTemplate Title="@($"Pull Requests ({TrackedPullRequests?.Count().ToString() ?? "0"})")" ShowSkeleton="TrackedPullRequests == null">
    <Content>
        <FluentDataGrid Id="pullRequestsGrid" Items="@TrackedPullRequests" GridTemplateColumns="3fr 2fr 2fr 1fr 1fr" TGridItem=TrackedPullRequest Style="width: 100%">
            <TemplateColumn Sortable="true" SortBy="SortBy(pr => pr.Url)" Align="Align.Start" Title="Pull request">
                <FluentAnchor Href="@context.Url" Target="_blank" Appearance="Appearance.Hypertext">@context.Url</FluentAnchor>
            </TemplateColumn>
            <TemplateColumn Sortable="true" SortBy="SortBy(pr => pr.Channel)" Align="Align.Center" Title="Channel">
                @if (context.Channel != null)
                {
                    <FluentLabel>@context.Channel</FluentLabel>
                }
                else
                {
                    <FluentLabel>
                        <FluentIcon Value="@(new Icons.Filled.Size20.Warning())"
                        Color="Color.Warning"
                        Title="Subscription for which this PR was created was not found" />
                    </FluentLabel>
                }
            </TemplateColumn>
            <TemplateColumn Sortable="true" SortBy="SortBy(pr => pr.TargetBranch)" Align="Align.Center" Title="Target branch">
                @if (context.TargetBranch != null)
                {
                    <FluentLabel>@context.TargetBranch</FluentLabel>
                }
                else
                {
                    <FluentLabel>
                        <FluentIcon Value="@(new Icons.Filled.Size20.Warning())"
                        Color="Color.Warning"
                        Title="Subscription for which this PR was created was not found" />
                    </FluentLabel>
                }
            </TemplateColumn>
            <TemplateColumn Sortable="true" SortBy="SortBy(pr => pr.LastUpdate.ToString())" Align="Align.Center" Title="Last Update">
                <FluentLabel>@GetFriendlyTime(context.LastUpdate)</FluentLabel>
            </TemplateColumn>
            <TemplateColumn Sortable="true" SortBy="SortBy(pr => pr.LastCheck.ToString())" Align="Align.Center" Title="Last Check">
                <FluentLabel>
                    @GetFriendlyTime(context.LastCheck)
                    @if (!context.NextCheck.HasValue)
                    {
                        <FluentIcon Value="@(new Icons.Filled.Size20.Warning())"
                                    Color="Color.Warning"
                                    Title="No future check set for this PR" />
                    }
                </FluentLabel>
            </TemplateColumn>
        </FluentDataGrid>
    </Content>
</GridViewTemplate>

@code {
    IQueryable<TrackedPullRequest>? TrackedPullRequests = null;
    Timer? _timer;
    GridSort<TrackedPullRequest> SortBy(Expression<Func<TrackedPullRequest, string>> sorter)
        => GridSort<TrackedPullRequest>.ByAscending(sorter);

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        _timer = new Timer(async _ => await LoadDataAsync(), null, TimeSpan.Zero, TimeSpan.FromSeconds(30));
    }

    private async Task LoadDataAsync()
    {
        TrackedPullRequests = (await api.PullRequest.GetTrackedPullRequestsAsync()).AsQueryable();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    private static string GetFriendlyTime(DateTimeOffset time)
    {
        var minutes = Math.Round((DateTimeOffset.UtcNow - time).TotalMinutes);
        if (Math.Abs(minutes) < 1)
        {
            return "Just now";
        }

        var period = Math.Abs(minutes) switch
        {
            > 1440 => $"{Math.Round(minutes / 1440)} day{(minutes / 1440 == 1 ? "" : "s")} ago",
            > 60 => $"{Math.Round(minutes / 60)} hour{(minutes / 60 == 1 ? "" : "s")} ago",
            _ => $"{minutes} minute{(minutes == 1 ? "" : "s")} ago",
        };

        return minutes > 0
            ? $"{minutes} min ago"
            : $"in {Math.Abs(minutes)} min";
    }
}
