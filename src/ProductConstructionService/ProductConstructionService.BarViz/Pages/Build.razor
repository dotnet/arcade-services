@page "/channel/{ChannelId:int}/{RepoSlug}/build/{BuildId}"
@using ProductConstructionService.BarViz.Code.Helpers
@using ProductConstructionService.BarViz.Components.Common
@using Microsoft.DotNet.ProductConstructionService.Client;
@using Microsoft.DotNet.ProductConstructionService.Client.Models;
@using ProductConstructionService.BarViz.Components;
@inject IProductConstructionServiceApi PcsApi

<PageTitle>@Channel</PageTitle>

@if (_build == null)
{
    <PageLoadingStatus StatusText="Loading build info ..." />
}
else
{
    <FluentStack VerticalGap="20" Orientation="Orientation.Vertical">
        <FluentLabel Typo="Typography.H2">
            @Channel
        </FluentLabel>

        <ErrorBoundary>
            <BuildInfo BuildId="@BuildId" Repository="@Repo" ChannelId="ChannelId" />
        </ErrorBoundary>
        
        <ErrorBoundary>
            <Dependencies BuildId="@_build.Id" ChannelId="@ChannelId" />
        </ErrorBoundary>

        <ErrorBoundary>
            <SubscriptionGrid Repository="@Repo" ChannelId="@ChannelId" />
        </ErrorBoundary>

        <Assets BuildId="@_build.Id" />

    </FluentStack>
}

@code {

    [Parameter]
    public int ChannelId { get; set; }

    [Parameter]
    public string? RepoSlug { get; set; }

    [Parameter]
    public string? BuildId { get; set; }

    private string? Repo { get; set; }

    private string? Channel { get; set; }

    private Microsoft.DotNet.ProductConstructionService.Client.Models.Build? _build;

    protected override async Task OnParametersSetAsync()
    {
        _build = null;

        Repo = RepoUrlConverter.SlugToRepoUrl(RepoSlug);
        Channel = (await PcsApi.Channels.GetChannelAsync(ChannelId)).Name;

        if (BuildId == "latest")
        {
            _build = await PcsApi.Builds.GetLatestAsync(repository: Repo, channelId: ChannelId);
        }
        else
        {
            _build = await PcsApi.Builds.GetBuildAsync(int.Parse(BuildId!));
        }
    }
}
