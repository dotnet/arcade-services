@using ProductConstructionService.BarViz.Components
@using ProductConstructionService.Client
@using ProductConstructionService.Client.Models;
@using System.Collections.Immutable
@inject IProductConstructionServiceApi PcsApi
@inject NavigationManager NavManager

<div class="navmenu">
  <input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />
  <label for="navmenu-toggle" class="navmenu-icon"><FluentIcon Value="@(new Icons.Regular.Size20.Navigation())" Color="Color.Fill" /></label>
  <nav class="sitenav" aria-labelledby="main-menu">
    <FluentNavMenu Id="main-menu" Width="250" Collapsible="true" Title="Navigation menu" @bind-Expanded="expanded" CustomToggle="true">
      <FluentNavLink Href="build" Icon="@(new Icons.Regular.Size20.SettingsCogMultiple())" IconColor="Color.Accent">Build</FluentNavLink>

      <h4 class="navmenu-heading">Channels</h4>

      <FluentAutocomplete TOption="Channel"
                          ImmediateDelay="10"
                          AutoComplete="off"
                          Autofocus="false"
                          Placeholder="Filter channels"
                          OnOptionsSearch="@OnSearch"
                          MaxAutoHeight="300px"
                          OptionText="@(channel => channel.Name)"
                          MaximumSelectedOptions="5"
                          SelectedOptionsChanged="@OnSelection"
                          SelectedOptions="@SelectedChannels">

        <MaximumSelectedOptionsMessage>
          The maximum number of selected items has been reached.
        </MaximumSelectedOptionsMessage>

        <FooterContent>
          @if (!context.Any())
          {
            <FluentLabel Style="font-size: 11px; text-align: center; width: 200px;">
              No results found
            </FluentLabel>
          }
        </FooterContent>
      </FluentAutocomplete>

      @foreach (var category in Categories)
      {
        <FluentNavGroup Title="@category.Name" Icon="@(new Icons.Regular.Size20.List())" Expanded="@expandedGroup">
          @foreach (var channel in category.Channels)
          {
            <ChannelNavMenuItem Channel="@channel" />
          }
        </FluentNavGroup>
      }

    </FluentNavMenu>
  </nav>
</div>

@code {
  [SupplyParameterFromQuery(Name = "channel")]
  private long[]? channelFilterQuery { get; set; }

  private bool expanded = true;
  private bool expandedGroup = false;

  private IEnumerable<Channel> SelectedChannels = Array.Empty<Channel>();
  private IImmutableList<Channel> availableChannels = ImmutableList<Channel>.Empty;

  private List<Category> Categories = new List<Category>();

  public class Category
  {
    public string Name { get; set; }
    public List<Channel> Channels { get; } = new List<Channel>();

    public Category(string name)
    {
      Name = name;
    }
  }

  protected override async Task OnInitializedAsync()
  {
    availableChannels = await PcsApi.Channels.ListChannelsAsync();
    if (channelFilterQuery != null)
    {
      var selectedChannels = channelFilterQuery
        .Select(f => availableChannels.First(channel => channel.Id == f));

      OnSelection(selectedChannels);

      return;
    }

    Categories = ConstructCategories(availableChannels);
  }

  private List<Category> ConstructCategories(IEnumerable<Channel> channels)
  {
    var otherCategory = new Category("Other");
    var testCategory = new Category("Test");

    var categories = new List<Category>
        {
            new Category(".NET 10"),
            new Category(".NET 9"),
            new Category(".NET 8"),
            new Category(".NET 6"),
            new Category(".NET"),
            new Category("VS"),
            new Category("Windows"),
            otherCategory,
            testCategory,
        };

    foreach (var channel in channels)
    {
      bool categorized = false;
      if (channel.Classification == "test")
      {
        testCategory.Channels.Add(channel);
        continue;
      }

      foreach (var category in categories)
      {
        if (channel.Name.StartsWith(category.Name))
        {
          category.Channels.Add(channel);
          categorized = true;
          break;
        }
      }

      if (!categorized)
      {
        otherCategory.Channels.Add(channel);
      }
    }

    categories
        .First(c => c.Name == ".NET")
        .Channels.Reverse();

    categories
        .First(c => c.Name == "VS")
        .Channels.Reverse();

    return categories;
  }

  private void OnSearch(OptionsSearchEventArgs<Channel> eventArgs) =>
      eventArgs.Items = availableChannels
          .Where(channel => channel.Name.StartsWith(eventArgs.Text, StringComparison.OrdinalIgnoreCase))
          .OrderBy(channel => channel.Name);

  private void OnSelection(IEnumerable<Channel> selectedChannels)
  {
    var hasSelectedItems = selectedChannels.Any();

    SelectedChannels = selectedChannels;
    expandedGroup = hasSelectedItems;

    Categories = ConstructCategories(hasSelectedItems ? selectedChannels : availableChannels);

    if (hasSelectedItems)
    {
      var newUri = NavManager.GetUriWithQueryParameters(new Dictionary<string, object?>
      {
        ["channel"] = selectedChannels.Select(channels => channels.Id).ToArray()
      });

      NavManager.NavigateTo(newUri);
    }
  }
}
