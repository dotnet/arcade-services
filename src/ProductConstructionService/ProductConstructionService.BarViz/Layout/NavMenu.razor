@using ProductConstructionService.BarViz.Components
@using ProductConstructionService.Client
@using ProductConstructionService.Client.Models;
@inject IProductConstructionServiceApi PcsApi
@inject NavigationManager NavManager

<div class="navmenu">
  <nav class="sitenav" aria-labelledby="main-menu">
    <input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />
    <FluentNavMenu Id="main-menu" Width="300" Collapsible="false" Title="Navigation menu" @bind-Expanded="expanded" CustomToggle="true">
      <FocusedChannelsSection AvailableChannels="@availableChannels"
                              PreFocusedChannels="@PreFocusedChannels" />

      <h4 class="navmenu-heading navmenu-heading-channels">Channels</h4>

      @foreach (var category in Categories)
      {
        <FluentNavGroup Title="@category.Name" Icon="@(new Icons.Regular.Size20.FolderList())">
          @foreach (var channel in category.Channels)
          {
            <ChannelNavMenuItem Channel="@channel" />
          }
        </FluentNavGroup>
      }

      <FluentSpacer />

      <h4 class="navmenu-heading">VMR</h4>

      <FluentNavLink Icon="@(new Icons.Regular.Size20.ArrowJoin())" IconColor="Color.Accent" Href="@("vmr-sync")">Synced Repos</FluentNavLink>

    </FluentNavMenu>
  </nav>
</div>

@code {
    [SupplyParameterFromQuery(Name = "channel")]
    private long[]? channelFilterQuery { get; set; }

    private bool expanded = true;

    private List<Channel> availableChannels = [];

    private List<Category> Categories = [];
    private List<Channel> PreFocusedChannels = [];

    public class Category
    {
        public string Name { get; set; }
        public List<Channel> Channels { get; } = new List<Channel>();

        public Category(string name)
        {
            Name = name;
        }
    }

  protected override async Task OnInitializedAsync()
  {
    availableChannels = await PcsApi.Channels.ListChannelsAsync();
    Categories = ConstructCategories();

    // Remove categories with no channels
    foreach (var category in Categories.ToList())
    {
      if (category.Channels.Count == 0)
      {
        Categories.Remove(category);
      }
    }

    if (channelFilterQuery != null)
    {
      PreFocusedChannels = channelFilterQuery
        .Select(f => availableChannels.First(channel => channel.Id == f))
        .ToList();
    }
  }

  private List<Category> ConstructCategories()
  {
    var otherCategory = new Category("Other");
    var testCategory = new Category("Test");

    var categories = new List<Category>
        {
            new Category(".NET 10"),
            new Category(".NET 9"),
            new Category(".NET 8"),
            new Category(".NET 6"),
            new Category(".NET"),
            new Category("VS"),
            new Category("Windows"),
            otherCategory,
            testCategory,
        };

    foreach (var channel in availableChannels)
    {
      bool categorized = false;
      if (channel.Classification == "test")
      {
        testCategory.Channels.Add(channel);
        continue;
      }

      foreach (var category in categories)
      {
        if (channel.Name.StartsWith(category.Name))
        {
          category.Channels.Add(channel);
          categorized = true;
          break;
        }
      }

      if (!categorized)
      {
        otherCategory.Channels.Add(channel);
      }
    }

    categories = categories
        .Where(c => c.Channels.Any())
        .ToList();

    categories
        .First(c => c.Name == ".NET")
        .Channels.Reverse();

    categories
        .First(c => c.Name == "VS")
        .Channels.Reverse();

    return categories;
  }
}
