@using ProductConstructionService.BarViz.Components
@using Microsoft.DotNet.ProductConstructionService.Client;
@using Microsoft.DotNet.ProductConstructionService.Client.Models;
@using Microsoft.DotNet.ProductConstructionService.Client.Helpers;
@using System.Collections.Immutable
@inject IProductConstructionServiceApi PcsApi
@inject NavigationManager NavManager

<div class="navmenu">
  <nav class="sitenav" aria-labelledby="main-menu">
    <input type="checkbox" title="Menu expand/collapse toggle" id="navmenu-toggle" class="navmenu-icon" />

    <PinnedChannels AvailableChannels="@AvailableChannels"
                      PrePinnedChannels="@PrePinnedChannels" />
    <h4 class="navmenu-heading navmenu-heading-channels">Channels</h4>

    <FluentNavMenu Id="main-menu" Width="300" Collapsible="false" Title="Navigation menu" @bind-Expanded="expanded" CustomToggle="true">
      @foreach (var category in Categories)
      {
        <FluentNavGroup Title="@category.Name" Icon="@(new Icons.Regular.Size20.FolderList())">
          @foreach (var channel in category.Channels)
          {
            <ChannelNavMenuItem Channel="@channel" />
          }
        </FluentNavGroup>
      }

    </FluentNavMenu>
  </nav>
</div>

@code {
    [SupplyParameterFromQuery(Name = "channel")]
    private long[]? channelFilterQuery { get; set; }

    private bool expanded = true;

    private List<Channel> AvailableChannels = [];
    private List<ChannelCategorizer.ChannelCategory> Categories = [];
    private List<Channel> PrePinnedChannels = [];
    
    protected override async Task OnInitializedAsync()
    {
        AvailableChannels = await PcsApi.Channels.ListChannelsAsync();
        Categories = ChannelCategorizer.CategorizeChannels(AvailableChannels);

        // Remove categories with no channels
        foreach (var category in Categories.ToList())
        {
            if (category.Channels.Count == 0)
            {
                Categories.Remove(category);
            }
        }

        if (channelFilterQuery != null)
        {
            PrePinnedChannels = channelFilterQuery
              .Select(f => AvailableChannels.First(channel => channel.Id == f))
              .ToList();
        }
    }
}
