@using Azure.Core
@using ProductConstructionService.Client
@using ProductConstructionService.Client.Models;
@using System.ComponentModel.DataAnnotations
@inject IProductConstructionServiceApi PcsApi

@if (assets == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <FluentStack VerticalGap="10" Orientation="Orientation.Vertical">
        <FluentLabel Typo="Typography.H3">Assets Produced</FluentLabel>

        <FluentSearch @bind-Value="@searchValue"
                      @bind-Value:after=HandleSearchInput
                      Immediate="true"
                      Placeholder="Search Asset Name" />

        <FluentDataGrid Id="assetsGrid" Items="@filteredAssets" GridTemplateColumns="1fr max-content" Pagination="pagination" TGridItem=Asset Style="width: 100%">
            <PropertyColumn Property="@(a => a!.Name)" Sortable="true" Align="Align.Stretch" />
            <TemplateColumn Sortable="false" Align="Align.Center" Title="Version">
                <FluentBadge Appearance="Appearance.Accent">@context.Version</FluentBadge>
            </TemplateColumn>
        </FluentDataGrid>

        <FluentPaginator State="@pagination" />
    </FluentStack>
}

@code {
    [Parameter]
    public int BuildId { get; set; }

    private string searchValue = string.Empty;

    PaginationState pagination = new() { ItemsPerPage = 15 };

    private IQueryable<Asset>? filteredAssets;
    private IQueryable<Asset>? assets;

    protected override async Task OnParametersSetAsync()
    {
        Build? build = await PcsApi.Builds.GetBuildAsync(BuildId);
        assets = build.Assets.AsQueryable();
        filteredAssets = assets;
    }

    void HandleSearchInput()
    {
        string searchTerm = searchValue.ToLower();

        filteredAssets = searchTerm.Length > 0
            ? assets?.Where(asset => asset.Name.ToLower().Contains(searchTerm))
            : assets;
    }
}
