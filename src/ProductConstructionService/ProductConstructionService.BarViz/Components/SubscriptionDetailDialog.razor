@using Microsoft.DotNet.ProductConstructionService.Client.Models
@implements IDialogContentComponent<Subscription>

<style>
    table.subscription-details {
        width: 100%;
        border-collapse: collapse;
        margin: 20px 0;
        font-size: 1rem;
        text-align: left;
    }

    table.subscription-details td {
        padding: 12px 15px;
        border: 1px solid #ddd;
    }

    table.subscription-details td:first-child {
        font-weight: bold;
    }

    body[data-theme="light"] table.subscription-details td:first-child,
    body[data-theme="system-light"] table.subscription-details td:first-child {
        background-color: #f9f9f9;
    }

    table.subscription-details ul {
        list-style-type: none;
        padding-left: 0;
        margin: 0;
    }
</style>

<table class="subscription-details">
    <tbody>
        <tr>
            <td>Id</td>
            <td>@Content.Id</td>
        </tr>
        <tr>
            <td>Channel</td>
            <td>@Content.Channel.Name</td>
        </tr>
        <tr>
            <td>Source repository</td>
            <td><FluentAnchor Href="@Content.SourceRepository" Target="_blank" Appearance="Appearance.Hypertext">@Content.SourceRepository</FluentAnchor></td>
        </tr>
        <tr>
            <td>Target repository</td>
            <td><FluentAnchor Href="@Content.TargetRepository" Target="_blank" Appearance="Appearance.Hypertext">@Content.TargetRepository</FluentAnchor></td>
        </tr>
        <tr>
            <td>Target branch</td>
            <td>@Content.TargetBranch</td>
        </tr>
        <tr>
            <td>Update frequency</td>
            <td>@Content.Policy.UpdateFrequency</td>
        </tr>
        <tr>
            <td>Enabled</td>
            <td>@(Content.Enabled ? "Yes" : "No")</td>
        </tr>
        <tr>
            <td>Batchable</td>
            <td>@(Content.Policy.Batchable ? "Yes" : "No")</td>
        </tr>
        <tr>
            <td>Merge policies</td>
            <td>
                @if (Content.Policy.MergePolicies == null || Content.Policy.MergePolicies.Count == 0)
                {
                    <span>None</span>
                }
                else
                {
                    <ul>
                        @foreach (var policy in Content.Policy.MergePolicies)
                        {
                            <li>@policy.Name</li>
                        }
                    </ul>
                }
            </td>
        </tr>
        <tr>
            <td>Source-enabled</td>
            <td>@(Content.SourceEnabled ? (Content.SourceDirectory != null ? "Forward flow" : "Backflow") + $" ({Content.SourceDirectory ?? Content.TargetDirectory})" : "No")</td>
        </tr>
        <tr>
            <td>ExcludedAssets</td>
            <td>
                @if (Content.ExcludedAssets == null || Content.ExcludedAssets.Count == 0)
                {
                    <span>None</span>
                }
                else
                {
                    <ul>
                        @foreach (var asset in Content.ExcludedAssets)
                        {
                            <li>@asset</li>
                        }
                    </ul>
                }
            </td>
        </tr>
        <tr>
            <td>PR notification tags</td>
            <td>@Content.PullRequestFailureNotificationTags</td>
        </tr>
    </tbody>
</table>

@code {
    [Parameter]
    public Subscription Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }
}
