@using ProductConstructionService.Client
@using ProductConstructionService.Client.Models;
@using System.ComponentModel.DataAnnotations
@inject IProductConstructionServiceApi PcsApi

<GridViewTemplate Title="Subscriptions" ShowSkeleton="_subscriptionsData == null">
    <Content>
        <FluentDataGrid Id="subscriptionsGrid" Items="@_subscriptionsData" GridTemplateColumns="3fr 1fr 1fr" TGridItem=Subscription Style="width: 100%">
            <TemplateColumn Sortable="true" Align="Align.Start" Title="Source Repository">
                @if (!context.Enabled)
                {
                    <FluentBadge Appearance="Appearance.Accent">Disabled</FluentBadge>
                }
                <FluentAnchor Href="@context.SourceRepository" Target="_blank" Appearance="Appearance.Hypertext">@context.SourceRepository</FluentAnchor>
            </TemplateColumn>
            <PropertyColumn Title="Source Channel" Property="@(s => s!.Channel.Name)" Align="Align.Center" />
            <PropertyColumn Title="Target Branch" Property="@(s => s!.TargetBranch)" Align="Align.Center" />
        </FluentDataGrid>
    </Content>
</GridViewTemplate>

@code {

    [Parameter]
    public string? Repository { get; set; }

    [Parameter]
    public int ChannelId { get; set; }

    private IQueryable<Subscription>? _subscriptionsData;

    protected override async Task OnParametersSetAsync()
    {
        _subscriptionsData = null;
        StateHasChanged();

        _subscriptionsData = (await PcsApi.Subscriptions.ListSubscriptionsAsync(channelId: ChannelId, targetRepository: Repository))!.AsQueryable();
        StateHasChanged();
    }

}
