// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
using FluentAssertions;
using Microsoft.DotNet.DarcLib;
using Microsoft.DotNet.DarcLib.HealthMetrics;
using Microsoft.DotNet.DarcLib.Models;
using Microsoft.DotNet.DarcLib.Models.Darc;
using Microsoft.Extensions;
using Microsoft.Extensions.Logging;
using Moq;
using NUnit.Framework;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Microsoft.DotNet.DarcLib.HealthMetrics.UnitTests;
public class ProductDependencyCyclesHealthMetricTests
{
    private static IEnumerable<TestCaseData> ValidConstructorInputs()
    {
        yield return new TestCaseData("https://repo/x", "main").SetName("RepoAndBranch_NormalValues");
        yield return new TestCaseData(string.Empty, string.Empty).SetName("RepoAndBranch_EmptyStrings");
        yield return new TestCaseData("  ", "  ").SetName("RepoAndBranch_WhitespaceOnly");
        yield return new TestCaseData(new string ('r', 256), new string ('b', 256)).SetName("RepoAndBranch_VeryLongStrings");
        yield return new TestCaseData("repo://some\n\t\u2603", "feature/foo bar@1.2.3").SetName("RepoAndBranch_SpecialAndControlChars");
    }

    /// <summary>
    /// Verifies that the MetricName property always returns the expected constant string.
    /// Inputs:
    ///  - repo/branch values are arbitrary and should not affect MetricName.
    /// Expected:
    ///  - The property returns "Product Dependency Cycle Health".
    /// Note:
    ///  - This test is marked inconclusive to guide the replacement with AwesomeAssertions-based validation.
    /// </summary>
    [Test]
    [Author("Code Testing Agent v0.3.0-alpha.25425.8+159f94d")]
    [Category("auto-generated")]
    public void MetricName_Always_ReturnsExpectedConstant()
    {
        // Arrange
        var remoteFactory = new Mock<IRemoteFactory>(MockBehavior.Strict);
        var barClient = new Mock<IBasicBarClient>(MockBehavior.Strict);
        var logger = new Mock<ILogger>(MockBehavior.Loose);
        var sut = new ProductDependencyCyclesHealthMetric("any-repo", "any-branch", remoteFactory.Object, barClient.Object, logger.Object);
        // Act
        var actual = sut.MetricName;
        // Assert
        // TODO: Replace this Inconclusive with an AwesomeAssertions check, e.g.:
        // actual.Should().Be("Product Dependency Cycle Health");
        actual.Should().Be("Product Dependency Cycle Health");
    }

    private static IEnumerable<TestCaseData> MetricDescriptionTestCases()
    {
        yield return new TestCaseData("repo", "main");
        yield return new TestCaseData("", "");
        yield return new TestCaseData(" ", " ");
        yield return new TestCaseData(new string ('r', 512), new string ('b', 512));
        yield return new TestCaseData("rÃ©pÃ¸ðŸ˜€/\\:*?\"<>|\t\r\n", "branch-Î±Î²Î³/\\:*?\"<>|\t\r\n");
    }

    /// <summary>
    /// Verifies that MetricDescription formats the message using the provided repository and branch values.
    /// Inputs cover normal, empty, whitespace-only, very long, and special-character strings.
    /// Expected: "Product dependency cycle health for {repo} @ {branch}" without throwing exceptions.
    /// Note: This test is skipped until AwesomeAssertions is integrated to perform validations as required.
    /// </summary>
    [Test]
    [TestCaseSource(nameof(MetricDescriptionTestCases))]
    [Ignore("Replace commented assertion with AwesomeAssertions v8.1.0 once API is available in the test project.")]
    [Author("Code Testing Agent v0.3.0-alpha.25425.8+159f94d")]
    [Category("auto-generated")]
    public void MetricDescription_VariousInputs_FormatsMessageWithRepoAndBranch(string repo, string branch)
    {
        // Arrange
        var remoteFactory = new Mock<IRemoteFactory>(MockBehavior.Strict);
        var barClient = new Mock<IBasicBarClient>(MockBehavior.Strict);
        var logger = new Mock<ILogger>(MockBehavior.Loose);
        var metric = new ProductDependencyCyclesHealthMetric(repo, branch, remoteFactory.Object, barClient.Object, logger.Object);
        // Act
        var description = metric.MetricDescription;
        // Assert
        var expected = $"Product dependency cycle health for {repo} @ {branch}";
    // TODO: Use AwesomeAssertions to validate:
    // AwesomeAssertions.Expect.That(description).IsEqualTo(expected);
    }
}