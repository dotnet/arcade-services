// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using Microsoft.DotNet.ProductConstructionService.Client.Models;
using Microsoft.DotNet.DarcLib.Models.Darc;
using NUnit.Framework;
using Microsoft.DotNet.DarcLib.Helpers;
using Microsoft.DotNet.DarcLib.VirtualMonoRepo;

#nullable enable
namespace ProductConstructionService.ScenarioTests;

[TestFixture]
[Category("PostDeployment")]
[Category("CodeFlow")]
internal partial class ScenarioTests_CodeFlow : CodeFlowScenarioTestBase
{
    private const string TestFile1Name = "newFile1.txt";
    private const string TestFile2Name = "newFile2.txt";
    private const string DefaultPatch = "@@ -0,0 +1 @@\n+test\n\\ No newline at end of file";

    private static readonly Dictionary<string, string> TestFilesContent = new()
    {
        { TestFile1Name, "test" },
        { TestFile2Name, "test" },
    };

    private static readonly Dictionary<string, string> TestFilePatches = new()
    {
        { $"{TestFile1Name}", DefaultPatch },
        { $"src/{TestRepository.TestRepo1Name}/{TestFile1Name}", DefaultPatch },
        { $"src/{TestRepository.TestRepo1Name}/{TestFile2Name}", DefaultPatch },
        { $"src/{TestRepository.TestRepo2Name}/{TestFile1Name}", DefaultPatch },
        { $"src/{TestRepository.TestRepo2Name}/{VersionFiles.VersionDetailsProps}", "@@ -0,0 +1,11 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+This file is auto-generated by the Maestro dependency flow system.\n+Do not edit it manually, as it will get overwritten by automation.\n+This file should be imported by eng/Versions.props\n+-->\n+<Project>\n+  <PropertyGroup />\n+  <!--Property group for alternate package version names-->\n+  <PropertyGroup />\n+</Project>" }
    };


    [Test]
    public async Task Vmr_ForwardFlowTest()
    {
        var channelName = GetTestChannelName();
        var branchName = GetTestBranchName();
        var productRepo = GetGitHubRepoUrl(TestRepository.TestRepo1Name);
        var targetBranchName = GetTestBranchName();

        await CreateTestChannelAsync(channelName);

        await using AsyncDisposableValue<string> subscriptionId = await CreateForwardFlowSubscriptionAsync(
            channelName,
            TestRepository.TestRepo1Name,
            TestRepository.VmrTestRepoName,
            targetBranchName,
            UpdateFrequency.None.ToString(),
            TestParameters.GitHubTestOrg,
            targetDirectory: TestRepository.TestRepo1Name);

        TemporaryDirectory vmrDirectory = await CloneRepositoryAsync(TestRepository.VmrTestRepoName);
        TemporaryDirectory reposFolder = await CloneRepositoryAsync(TestRepository.TestRepo1Name);
        var newFilePath = Path.Combine(reposFolder.Directory, TestFile1Name);

        await CreateTargetBranchAndExecuteTest(targetBranchName, vmrDirectory.Directory, async () =>
        {
            using (ChangeDirectory(reposFolder.Directory))
            {
                await using (await CheckoutBranchAsync(branchName))
                {
                    // Make a change in a product repo
                    TestContext.WriteLine("Making code changes to the repo");
                    await File.WriteAllTextAsync(newFilePath, TestFilesContent[TestFile1Name]);

                    await GitAddAllAsync();
                    await GitCommitAsync("Add new file");

                    // Push it to github
                    await using (await PushGitBranchAsync("origin", branchName))
                    {
                        var repoSha = (await GitGetCurrentSha()).TrimEnd();

                        // Create a new build from the commit and add it to a channel
                        Build build = await CreateBuildAsync(
                            GetGitHubRepoUrl(TestRepository.TestRepo1Name),
                            branchName,
                            repoSha,
                            "1",
                            []);

                        TestContext.WriteLine("Adding build to channel");
                        await AddBuildToChannelAsync(build.Id, channelName);

                        TestContext.WriteLine("Triggering the subscription");
                        // Now trigger the subscription
                        await TriggerSubscriptionAsync(subscriptionId.Value);

                        TestContext.WriteLine("Verifying subscription PR");
                        await CheckForwardFlowGitHubPullRequest(
                            [(TestRepository.TestRepo1Name, repoSha)],
                            TestRepository.VmrTestRepoName,
                            targetBranchName,
                            [$"src/{TestRepository.TestRepo1Name}/{TestFile1Name}"],
                            TestFilePatches);
                    }
                }
            }
        });
    }

    [Test]
    public async Task Vmr_BackwardFlowTest()
    {
        var channelName = GetTestChannelName();
        var branchName = GetTestBranchName();
        var productRepo = GetGitHubRepoUrl(TestRepository.TestRepo2Name);
        var targetBranchName = GetTestBranchName();

        await CreateTestChannelAsync(channelName);

        await using AsyncDisposableValue<string> subscriptionId = await CreateBackwardFlowSubscriptionAsync(
            channelName,
            TestRepository.VmrTestRepoName,
            TestRepository.TestRepo2Name,
            targetBranchName,
            UpdateFrequency.None.ToString(),
            TestParameters.GitHubTestOrg,
            sourceDirectory: TestRepository.TestRepo2Name);

        string package1 = GetUniqueAssetName("Foo");
        string package2 = GetUniqueAssetName("Bar");
        string pinnedArcade = DependencyFileManager.ArcadeSdkPackageName;
        string pinnedPackage = GetUniqueAssetName("Pinned");
        List<AssetData> source1Assets = GetAssetData(package1, "1.1.0", package2, "2.1.0");
        List<AssetData> pinnedAssets = GetAssetData(pinnedArcade, "1.1.0", pinnedPackage, "2.1.0");
        List<AssetData> source1AssetsUpdated = GetAssetData(package1, "1.17.0", package2, "2.17.0");
        List<AssetData> updatedPinnedAssets = GetAssetData(pinnedArcade, "1.17.0", pinnedPackage, "2.17.0");

        TemporaryDirectory testRepoFolder = await CloneRepositoryAsync(TestRepository.TestRepo2Name);
        string sourceRepoUri = GetGitHubRepoUrl(TestRepository.VmrTestRepoName);
        TemporaryDirectory vmrFolder = await CloneRepositoryAsync(TestRepository.VmrTestRepoName);
        var newFilePath = Path.Combine(vmrFolder.Directory, "src", TestRepository.TestRepo2Name, TestFile1Name);

        await CreateTargetBranchAndExecuteTest(targetBranchName, testRepoFolder.Directory, async () =>
        {
            TestContext.WriteLine("Adding dependencies to target repo");
            await AddDependenciesToLocalRepo(testRepoFolder.Directory, source1Assets, sourceRepoUri);
            await AddDependenciesToLocalRepo(testRepoFolder.Directory, pinnedAssets, sourceRepoUri, pinned: true);

            TestContext.WriteLine("Pushing branch to remote");
            await GitCommitAsync("Add dependencies");

            await using (await PushGitBranchAsync("origin", targetBranchName))
            {
                using (ChangeDirectory(vmrFolder.Directory))
                {
                    await using (await CheckoutBranchAsync(branchName))
                    {
                        // Make a change in the VMR
                        TestContext.WriteLine("Making code changes in the VMR");
                        File.WriteAllText(newFilePath, TestFilesContent[TestFile1Name]);

                        await GitAddAllAsync();
                        await GitCommitAsync("Add new file");

                        // Push it to github
                        await using (await PushGitBranchAsync("origin", branchName))
                        {
                            var repoSha = (await GitGetCurrentSha()).TrimEnd();

                            // Create a new build from the commit and add it to a channel
                            Build build = await CreateBuildAsync(
                                GetGitHubRepoUrl(TestRepository.VmrTestRepoName),
                                branchName,
                                repoSha,
                                "1",
                                [ ..source1AssetsUpdated, ..updatedPinnedAssets ]);

                            TestContext.WriteLine("Adding build to channel");
                            await AddBuildToChannelAsync(build.Id, channelName);

                            TestContext.WriteLine("Triggering the subscription");
                            // Now trigger the subscription
                            await TriggerSubscriptionAsync(subscriptionId.Value);

                            TestContext.WriteLine("Verifying subscription PR");
                            var assetsToVerify = pinnedAssets
                                .Concat(source1AssetsUpdated)
                                .Select(a => new DependencyDetail() { Name = a.Name, Version = a.Version}).ToList();
                            await CheckBackwardFlowGitHubPullRequest(
                                TestRepository.VmrTestRepoName,
                                TestRepository.TestRepo2Name,
                                targetBranchName,
                                [TestFile1Name],
                                TestFilePatches,
                                assetsToVerify,
                                repoSha,
                                build.Id);
                        }
                    }
                }
            }
        });
    }


}
